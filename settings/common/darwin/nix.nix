{
  config,
  lib,
  pkgs,
  ...
}:
with builtins;
let
  ## https://github.com/nix-darwin/nix-darwin/blob/fa6120c32f10bd2aac9e8c9a6e71528a9d9d823b/modules/nix/default.nix#L58
  mkValueString =
    v:
    if v == null then
      ""
    else if isInt v then
      toString v
    else if isBool v then
      lib.boolToString v
    else if isFloat v then
      lib.strings.floatToString v
    else if isList v then
      toString v
    else if lib.isDerivation v then
      toString v
    else if builtins.isPath v then
      toString v
    else if isString v then
      v
    else if isCoercibleToString v then
      toString v
    else
      abort "The nix conf value: ${toPretty { } v} can not be encoded";
  mkKeyValue = k: v: "${lib.escape [ "=" ] k} = ${mkValueString v}";
  mkKeyValuePairs = attrs: concatStringsSep "\n" (lib.mapAttrsToList mkKeyValue attrs);
  isExtra = key: lib.hasPrefix "extra-" key;
  extendedSettings = {
    accept-flake-config = true;
    builders = "";
    build-users-group = "";
    extra-experimental-features = [
      "nix-command"
      "flakes"
    ];
    sandbox-fallback = false;
    # ssl-cert-file = "/opt/homebrew/etc/openssl@3/cert.pem";
    warn-dirty = false;
  };
in
{
  environment.etc = {
    "nix/nix.conf" = lib.mkForce {
      enable = true;
      text = ''
        # WARNING: generated by nix-darwin. Do not edit it!
        ${mkKeyValuePairs (lib.filterAttrs (key: value: !(isExtra key)) config.nix.settings)}
        ${mkKeyValuePairs (lib.filterAttrs (key: value: !(isExtra key)) extendedSettings)}
        ${mkKeyValuePairs (lib.filterAttrs (key: value: isExtra key) config.nix.settings)}
        ${mkKeyValuePairs (lib.filterAttrs (key: value: isExtra key) extendedSettings)}
      '';
    };
    "nix/registry.json" = {
      # # see nixpkgs.flake.setFlakeRegistry
      text = builtins.toJSON {
        version = 2;
        flakes = lib.mapAttrsToList (n: v: { inherit (v) from to exact; }) config.nix.registry;
      };
    };
  };

  environment.variables = {
    # # see nixpkgs.flake.setFlakeRegistry
    NIX_PATH = [
      "nixpkgs=flake:nixpkgs"
      # "${config.system.primaryUserHome}/.nix-defexpr/channels"
      "/nix/var/nix/profiles/per-user/root/channels"
    ];
  };

  home-manager.sharedModules = [
    {
      ## TODO get URLs from flake inputs
      ## nix eval --json --file flake.nix --apply 'root: builtins.mapAttrs (_: v: v.url) root.inputs'
      home.file.".nix-channels" = {
        text = ''
          https://github.com/nix-darwin/nix-darwin/archive/nix-darwin-25.05.tar.gz darwin
          https://github.com/NixOS/nixpkgs/archive/395178e287fa9f63205b4d117d67241eef34866c.tar.gz unstable
          https://github.com/NixOS/nixpkgs/archive/refs/tags/25.05.tar.gz nixpkgs
          https://github.com/nix-community/NUR/archive/b30c245e2c44c7352a27485bfd5bc483df660f0e.tar.gz nur
        '';
      };

      programs.helix.extraPackages = lib.mkMerge [
        [
          pkgs.unstable.nil
          pkgs.unstable.nixd
        ]
      ];
    }
  ];

  nix = {
    ## nix-darwin since 25.05 only supports multi-user installations; it dropped
    ## all options to disable the daemon or to configure build users. This is a
    ## big no-no for my work environment as I must run it as a single-user with
    ## no daemon. I also prefer to run that way on my personal environment.
    ##
    ## Alternative: manage nix.conf directly & the nix package myself.
    enable = false;
    settings = lib.mkForce {
      allowed-users = [
        "@admin"
      ];
      require-sigs = true;
      sandbox = true;
      substituters = [
        "https://wwmoraes.cachix.org/"
        "https://nix-community.cachix.org/"
        "https://cache.nixos.org/"
      ];
      trusted-public-keys = [
        "wwmoraes.cachix.org-1:N38Kgu19R66Jr62aX5rS466waVzT5p/Paq1g6uFFVyM="
        "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
        "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
      ];
      trusted-users = [
        "@admin"
      ];
    };
  };

  system.checks = {
    verifyBuildUsers = false;
  };

  ## nuke the unconfigurable daemon settings since nix-darwin 25.05
  system.activationScripts.nix-daemon.text = lib.mkForce "## no-op";

  ## single-user mode requires nix.enable = false, which is incompatible with
  ## this; thus we set it ourselves :D
  # nixpkgs.flake.setFlakeRegistry = true;
}
