# chezmoi:template:left-delimiter="#{{" right-delimiter=}}
{ config, lib, pkgs, ... }:
rec {
  imports = [
    ./modules
    #{{- if .tags.personal }}
    ./darwin/home-configuration.nix
    #{{- else if .tags.work }}
    ./darwin/work-configuration.nix
    #{{- end }}
  ];

  nixpkgs.overlays = [
    (self: super: {
      fortune = super.fortune.override {
        withOffensive = true;
      };
    })
  ];

  environment.etc = {
    "pam.d/sudo_local" = {
      # sudo_local: local config file which survives system update and is included for sudo
      enable = true;
      text = ''
        auth optional   ${pkgs.pam-reattach}/lib/pam/pam_reattach.so
        auth sufficient pam_tid.so
      '';
    };
    "sudoers.d/darwin-#{{ .chezmoi.username }}" = {
      enable = true;
      text = ''
        #{{ .chezmoi.username }} ALL = NOPASSWD: /bin/rm -rf /Library/Developer/CommandLineTools
        #{{ .chezmoi.username }} ALL = NOPASSWD: /usr/bin/xcode-select --install
        #{{ .chezmoi.username }} ALL = NOPASSWD: /usr/sbin/DevToolsSecurity -enable
      '';
    };
  };

  # List packages installed in system profile. To search by name, run:
  # $ nix-env -qaP | grep wget
  environment.systemPackages = (with pkgs; [
    # tmuxPlugins.vim-tmux-focus-events # TODO configure in vim
    bat
    coreutils
    delta
    # dive
    # docker
    # docker-credential-helpers
    envsubst
    fortune
    fswatch
    fzf
    gawk
    git
    gnupg
    grc
    # jq
    lazygit
    less
    moreutils
    neo-cowsay
    pam-reattach
    pet
    powerline-go
    smug
    tlrc
    vim
  ]) ++ (with pkgs.fishPlugins; [
    # fzf
    grc
    sponge
    transient-fish
  ]) ++ (with pkgs.tmuxPlugins; [
    continuum
    copycat
    resurrect
    sessionist
    yank
  ]);

  environment.systemPath = [
    "$HOME/.local/bin"
    # "$HOME/Applications/kitty.app/Contents/MacOS"
    "$HOME/go/bin"
    # "$HOME/.cabal/bin"
    # "$HOME/.cargo/bin"
    # "$HOME/.nix-profile/bin"
    # "/run/current-system/sw/bin"
    # "/nix/var/nix/profiles/default/bin"
    config.homebrew.brewPrefix
    (builtins.toString (/. + "${config.homebrew.brewPrefix}/../sbin"))
    (builtins.toString (/. + "${config.homebrew.brewPrefix}/../opt/coreutils/libexec/gnubin"))
    (builtins.toString (/. + "${config.homebrew.brewPrefix}/../opt/openjdk/bin"))
    "/usr/local/sbin"
    #{{- range $_, $line := (include "/etc/paths" | trimAll "\r\n" | splitList "\n") }}
    #{{- if not (contains " " $line) }}
    #{{- $line | quote | nindent 4 }}
    #{{- end }}
    #{{- end }}
    #{{- range $_, $pathSource := glob "/etc/paths.d/*" }}
    #{{- range $_, $line := (include $pathSource | trimAll "\r\n" | splitList "\n") }}
    #{{- if not (contains " " $line) }}
    #{{- $line | quote | nindent 4 }}
    #{{- end }}
    #{{- end }}
    #{{- end }}
  ];

  environment.manPath = [
    "$HOME/.nix-profile/share/man"
  ];

  # TODO configure fonts
  fonts.packages = with pkgs; [
    comfortaa
    fira-code
    fira-code-symbols
    montserrat
    powerline-fonts
    powerline-symbols
    source-code-pro
  ];

  /** TODO update font caches
    printf "Updating font cache...\n"
    fc-cache -f

    printf "refreshing font database...\n"
    atsutil databases -removeUser

    printf "reloading font daemon...\n"
    killall fontd || true
  */

  homebrew.taps = [
    "dsully/tap" # macos-defaults
    "homebrew/bundle"
    "homebrew/services"
    "raggi/ale" # openssl-osx-ca
    "wwmoraes/tap"
  ];

  homebrew.brews = [
    "macos-defaults"
    "openssl-osx-ca"
  ];

  homebrew.casks = [
    "1password-cli"
    "1password"
    "amethyst"
    "anytype"
    "appcleaner"
    "automatic-mouse-mover"
    "bartender"
    "bruno"
    "das-keyboard-q"
    "displaylink-login-screen-ext"
    "displaylink-manager"
    "docker"
    "elgato-stream-deck"
    "finicky"
    "flux"
    "gas-mask"
    "gimp"
    "gpg-suite-no-mail"
    "hammerspoon"
    "jabra-direct"
    "jtool2"
    "kitty"
    "launchpad-manager"
    "spotify"
    "suspicious-package"
    "the-unarchiver"
    "thingsmacsandboxhelper"
    "uninstallpkg"
    "visual-studio-code"
    "xbar"
    "zap"
    "zotero"
  ];

  homebrew.masApps = {
    "1Password for Safari" = 1569813296;
    "DoMarks" = 1518886084;
    "StopTheMadness" = 1376402589;
    "Tampermonkey" = 1482490089;
    "Things" = 904280696;
    "Userscripts-Mac-App" = 1463298887;
  };

  environment.variables = launchd.user.envVariables // {
    EDITOR = "vim";
    FZF_COMPLETE = "1";
    FZF_DEFAULT_OPTS = "--height=50% --layout=reverse";
    FZF_LEGACY_KEYBINDINGS = "0";
    FZF_REVERSE_ISEARCH_OPTS = ''--preview-window=up:10 --preview=\"bat {}\" --height=50%'';
    LESS = "-isRMFX +Gg --tilde";
    LSCOLORS = "exfxcxdxbxegedabagacad";
    MANPAGER = "less";
    VISUAL = "code";
    NIX_REMOTE = "daemon";
    PAGER = "less";
    SUDO_EDITOR = "vim";
    NIX_USER_PROFILE_DIR = "/nix/var/nix/profiles/per-user/$USER";
    PROJECTS_ORIGIN = "git@github.com:wwmoraes/%s.git";
    SSH_AUTH_SOCK = "$HOME/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock";
  };

  homebrew.enable = true;
  homebrew.caskArgs = {
    appdir = "~/Applications";
    no_quarantine = true;
  };
  homebrew.global = {
    autoUpdate = false;
    lockfiles = false;
  };
  homebrew.onActivation = {
    autoUpdate = true;
    upgrade = true;
    cleanup = "uninstall"; # "uninstall", "zap"
  };

  launchd.daemons = {
    "dev.artero.limit.maxfiles" = {
      serviceConfig = {
        Label = "dev.artero.limit.maxfiles";
        ProgramArguments = [
          "launchctl"
          "limit"
          "maxfiles"
          "1048576"
          "1048576"
        ];
        RunAtLoad = true;
      };
    };
    "dev.artero.limit.maxproc" = {
      serviceConfig = {
        Label = "dev.artero.limit.maxproc";
        ProgramArguments = [
          "launchctl"
          "limit"
          "maxproc"
          "65536"
          "65536"
        ];
        RunAtLoad = true;
      };
    };
    "dev.artero.sysctl" = {
      serviceConfig = {
        Label = "dev.artero.sysctl";
        ProgramArguments = [
          "/usr/sbin/sysctl"
          "kern.maxfiles=1048576"
          "kern.maxfilesperproc=65536"
        ];
        RunAtLoad = true;
      };
    };
    nix-daemon = {
      serviceConfig = {
        EnvironmentVariables = {
          NIX_GIT_SSL_CAINFO = environment.variables.NIX_GIT_SSL_CAINFO;
          NIX_SSL_CERT_FILE = environment.variables.NIX_SSL_CERT_FILE;
        };
      };
    };
  };
  launchd.user.agents = {
    "homebrew.mxcl.openssl-osx-ca" = {
      serviceConfig = {
        Label = "homebrew.mxcl.openssl-osx-ca";
        StartInterval = 604800;
      };
    };
  };
  launchd.user.envVariables = rec {
    CURL_CA_BUNDLE = SSL_CERT_FILE;
    NIX_SSL_CERT_FILE = SSL_CERT_FILE;
    NIX_GIT_SSL_CAINFO = SSL_CERT_FILE;
    NODE_EXTRA_CA_CERTS = SSL_CERT_FILE;
    REQUESTS_CA_BUNDLE = SSL_CERT_FILE;
    SSL_CERT_FILE = builtins.toString (/. + "${config.homebrew.brewPrefix}/../etc/openssl@3/cert.pem");
    LANG = "en_US.UTF-8";
    LC_ALL = "en_US.UTF-8";
    LC_COLLATE = "en_US.UTF-8";
    LC_CTYPE = "en_US.UTF-8";
    LC_MESSAGES = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_NUMERIC = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
    EDITOR = "";
  };

  nix.configureBuildUsers = true;
  nix.nixPath = [
    { kaizen = "$HOME/dev/kaizen"; }
    { darwin-config = "${config.environment.darwinConfig}"; }
    { darwin = "$HOME/.nix-defexpr/channels/darwin"; }
    { nixpkgs = "/nix/var/nix/profiles/per-user/root/channels/nixpkgs"; }
    "/nix/var/nix/profiles/per-user/root/channels"
  ];
  nix.nrBuildUsers = 32;
  nix.package = pkgs.nix;
  nix.settings.trusted-users = [
    "@_developer"
    "@admin"
    "root"
  ];

  programs.direnv = {
    enable = true;
    nix-direnv.enable = true;
    silent = true;
  };

  programs.fish = {
    babelfishPackage = pkgs.babelfish;
    enable = true;
    useBabelfish = true;
    vendor = {
      completions.enable = true;
      config.enable = true;
      functions.enable = true;
    };
  };

  programs.tmux = {
    defaultCommand = "${pkgs.fish}/bin/fish -l";
    enable = true;
    enableFzf = true;
    enableMouse = true;
    # TODO move to external file
    extraConfig = ''
      set -as terminal-features 'xterm*:extkeys'
      set -g @shell_mode 'vi'
      set -g @yank_action 'copy-pipe'
      set -g @yank_selection 'clipboard'
      set -g @yank_selection_mouse 'clipboard'
      set -g allow-rename on
      set -g alternate-screen on
      set -g base-index 1
      set -g bell-action none
      set -g default-shell ${pkgs.fish}/bin/fish
      set -g default-terminal "screen-256color"
      set -g display-time 3000
      set -g exit-empty off
      set -g exit-unattached off
      set -g focus-events on
      set -g history-limit 50000
      set -g renumber-windows on
      set -g set-clipboard on
      set -g set-titles on
      set -g status-interval 5
      set -g status-keys vi
      set -g visual-activity on
      set -g visual-bell on
      set -g visual-silence on
      set -s escape-time 0
      set -s extended-keys on
      setw -g aggressive-resize on
      setw -g automatic-rename on
      setw -g clock-mode-style 24
      setw -g mode-keys vi
      setw -g monitor-activity on
      setw -g monitor-bell on
      setw -g monitor-silence 60
      setw -g pane-base-index 1
      setw -g xterm-keys on

      bind '"' split-window -h -c '#{pane_current_path}'
      bind %   split-window -v -c '#{pane_current_path}'
      bind C   new-session
      bind c   new-window -c '#{pane_current_path}'
      bind h   select-pane -L
      bind j   select-pane -D
      bind k   select-pane -U
      bind l   select-pane -R
      bind s   split-window -v -c '#{pane_current_path}'
      bind S   switch-client -l
      bind v   split-window -h -c '#{pane_current_path}'
      bind r   source-file /etc/tmux.conf \; display "configuration reloaded"
      bind C-y set synchronize-panes \; display "Sync #{?synchronize-panes,ON,OFF}"
      bind C-l clear-history \; display "history cleared"

      bind -n C-M-h swap-window -t -1\; select-window -t -1
      bind -n C-M-l swap-window -t +1\; select-window -t +1
      bind -n M-h   select-pane -L
      bind -n M-j   select-pane -D
      bind -n M-k   select-pane -U
      bind -n M-l   select-pane -R

      bind-key -T copy-mode    MouseDragEnd1Pane send-keys -X copy-pipe pbcopy
      bind-key -T copy-mode-vi !                 send-keys -X copy-pipe "tr -d '\n' | pbcopy"
      bind-key -T copy-mode-vi C-j               send-keys -X copy-pipe
      bind-key -T copy-mode-vi M-y               send-keys -X copy-pipe-and-cancel "pbcopy; tmux paste-buffer"
      bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe pbcopy
      bind-key -T copy-mode-vi p                 send-keys -X copy-pipe "tmux paste-buffer"
      bind-key -T copy-mode-vi v                 send-keys -X begin-selection
      bind-key -T copy-mode-vi Y                 send-keys -X copy-pipe "tmux paste-buffer"
      bind-key -T copy-mode-vi y                 send-keys -X copy-pipe pbcopy

      run-shell '${pkgs.tmuxPlugins.continuum}/share/tmux-plugins/continuum/continuum.tmux'
      run-shell '${pkgs.tmuxPlugins.copycat}/share/tmux-plugins/copycat/copycat.tmux'
      run-shell '${pkgs.tmuxPlugins.resurrect}/share/tmux-plugins/resurrect/resurrect.tmux'
      run-shell '${pkgs.tmuxPlugins.sessionist}/share/tmux-plugins/sessionist/sessionist.tmux'
      run-shell '${pkgs.tmuxPlugins.yank}/share/tmux-plugins/yank/yank.tmux'

      source-file -q ~/.tmux.conf
    '';
  };

  security.pki.certificateFiles = [
    "#{{ .brew.prefix }}/etc/openssl@3/cert.pem"
    # "/etc/ssl/certs/ca-certificates.crt"
    # "${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt"
  ];

  services.nix-daemon.enable = true;

  # Used for backwards compatibility, please read the changelog before changing.
  # $ darwin-rebuild changelog
  system.stateVersion = 4;

  time.timeZone = "Europe/Amsterdam";
}
