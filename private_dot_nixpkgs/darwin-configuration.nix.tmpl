# chezmoi:template:left-delimiter="#{{" right-delimiter=}}
{ config
, lib
, pkgs
, ...
}: let
  unstable = import <unstable> {};
  home = builtins.getEnv "HOME";
in rec {
  imports = [
    ./modules
    #{{- if .environment.home }}
    ./darwin/home-configuration.nix
    #{{- else if .environment.work }}
    ./darwin/work-configuration.nix
    #{{- end }}
  ];

  #region packages
  environment.systemPackages = [
    # pkgs.dive
    # pkgs.docker
    # pkgs.docker-credential-helpers
    pkgs.bat
    pkgs.coreutils
    pkgs.delta
    pkgs.envsubst
    pkgs.fortune
    pkgs.fswatch
    pkgs.fzf
    pkgs.gawk
    pkgs.git
    pkgs.gnupg
    pkgs.grc
    pkgs.jq
    pkgs.lazygit
    pkgs.less
    pkgs.moreutils
    pkgs.neo-cowsay
    pkgs.nixd
    pkgs.pam-reattach
    pkgs.pet
    pkgs.pinentry-tty
    pkgs.powerline-go
    pkgs.smug
    pkgs.tlrc
    pkgs.vim
    unstable.mactop
  ] ++ (with pkgs.fishPlugins; [
    # fzf
    # vim-tmux-focus-events # TODO configure in vim
    grc
    sponge
    transient-fish
  ]) ++ (with pkgs.tmuxPlugins; [
    continuum
    copycat
    resurrect
    sessionist
    yank
  ]);

  # TODO configure fonts
  fonts.packages = with pkgs; [
    comfortaa
    fira-code
    fira-code-symbols
    montserrat
    powerline-fonts
    powerline-symbols
    source-code-pro
  ];

  homebrew.brews = [
    "openssl-osx-ca"
  ];

  homebrew.casks = [
    "1password-cli"
    "1password"
    "amethyst"
    "anytype"
    "appcleaner"
    "automatic-mouse-mover"
    "bartender"
    "bruno"
    "das-keyboard-q"
    "displaylink-login-screen-ext"
    "displaylink-manager"
    "docker"
    "elgato-stream-deck"
    "finicky"
    "flux"
    "gas-mask"
    "gimp"
    "gpg-suite-no-mail"
    "hammerspoon"
    "jabra-direct"
    "jtool2"
    "kitty"
    "launchpad-manager"
    "spotify"
    "suspicious-package"
    "swiftbar"
    "the-unarchiver"
    "thingsmacsandboxhelper"
    "uninstallpkg"
    "visual-studio-code"
    "zap"
    "zotero"
  ];

  homebrew.masApps = {
    "1Password for Safari" = 1569813296;
    "DoMarks" = 1518886084;
    "StopTheMadness" = 1376402589;
    "Tampermonkey" = 1482490089;
    "Things" = 904280696;
    "Userscripts-Mac-App" = 1463298887;
  };

  homebrew.taps = [
    "homebrew/bundle"
    "homebrew/services"
    "raggi/ale" # openssl-osx-ca
    "wwmoraes/tap"
  ];

  nixpkgs.overlays = [
    (self: super: {
      fortune = super.fortune.override {
        withOffensive = true;
      };
    })
  ];
  #endregion

  #region environment variables

  environment.infoPath = [
    (builtins.toString (/. + "${config.homebrew.brewPrefix}/../share/info"))
  ];

  environment.manPath = [
    "$HOME/.nix-profile/share/man"
    (builtins.toString (/. + "${config.homebrew.brewPrefix}/../share/man"))
  ];

  environment.systemPath = lib.mkMerge [
    (lib.mkBefore [
      "$HOME/.local/bin"
      "$HOME/.nix-profile/bin"
      "$HOME/go/bin"
      # "$HOME/.cabal/bin"
      # "$HOME/.cargo/bin"
      config.homebrew.brewPrefix
      (builtins.toString (/. + "${config.homebrew.brewPrefix}/../sbin"))
      (builtins.toString (/. + "${config.homebrew.brewPrefix}/../opt/coreutils/libexec/gnubin"))
    ])
    (lib.mkAfter [
      "/usr/local/sbin"
      #{{- range $_, $line := (include "/etc/paths" | trimAll "\r\n" | splitList "\n") }}
      #{{- if not (contains " " $line) }}
      #{{- $line | quote | nindent 6 }}
      #{{- end }}
      #{{- end }}
      #{{- range $_, $pathSource := glob "/etc/paths.d/*" }}
      #{{- range $_, $line := (include $pathSource | trimAll "\r\n" | splitList "\n") }}
      #{{- if not (contains " " $line) }}
      #{{- $line | quote | nindent 6 }}
      #{{- end }}
      #{{- end }}
      #{{- end }}
    ])
  ];

  environment.variables = launchd.user.envVariables // {
    CGO_ENABLED = "0";
    EDITOR = "vim";
    FZF_COMPLETE = "1";
    FZF_DEFAULT_OPTS = "--height=50% --layout=reverse";
    FZF_LEGACY_KEYBINDINGS = "0";
    FZF_REVERSE_ISEARCH_OPTS = ''--preview-window=up:10 --preview=\"bat {}\" --height=50%'';
    GOPATH = "$HOME/.go";
    LANG = "en_US.UTF-8";
    LC_ALL = "en_US.UTF-8";
    LC_COLLATE = "en_US.UTF-8";
    LC_CTYPE = "en_US.UTF-8";
    LC_MESSAGES = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_NUMERIC = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
    LESS = "-isRMFX --tilde +Gg";
    LSCOLORS = "exfxcxdxbxegedabagacad";
    MANPAGER = "less";
    NIX_PATH = config.nix.nixPath;
    NIX_USER_PROFILE_DIR = "/nix/var/nix/profiles/per-user/$USER";
    PAGER = "less";
    PROJECTS_ORIGIN = "git@github.com:wwmoraes/%s.git";
    SSH_AUTH_SOCK = "$HOME/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock";
    SUDO_EDITOR = "vim";
    VISUAL = "code";
  };

  launchd.user.envVariables = rec {
    CURL_CA_BUNDLE = SSL_CERT_FILE;
    NIX_SSL_CERT_FILE = SSL_CERT_FILE;
    NIX_GIT_SSL_CAINFO = SSL_CERT_FILE;
    NODE_EXTRA_CA_CERTS = SSL_CERT_FILE;
    REQUESTS_CA_BUNDLE = SSL_CERT_FILE;
    SSL_CERT_FILE = builtins.toString (/. + "${config.homebrew.brewPrefix}/../etc/openssl@3/cert.pem");
  };

  nix.nixPath = [
    { kaizen = "$HOME/dev/kaizen"; }
    { darwin-config = "${config.environment.darwinConfig}"; }
    { darwin = "$HOME/.nix-defexpr/channels/darwin"; }
    { nixpkgs = "/nix/var/nix/profiles/per-user/root/channels/nixpkgs"; }
    "/nix/var/nix/profiles/per-user/root/channels"
  ];

  #endregion

  #region files

  environment.etc = {
    "pam.d/sudo_local" = {
      # sudo_local: local config file which survives system update and is included for sudo
      enable = true;
      text = ''
        auth optional   ${pkgs.pam-reattach}/lib/pam/pam_reattach.so
        auth sufficient pam_tid.so
      '';
    };
  };

  system.activationScripts.postActivation.text = ''
    printf >&2 'cleaning up root mail...\n'
    echo 'd *' | mailx > /dev/null 2>&1 || true
  '';

  launchd.user.agents = {
    "dev.artero.environment" = {
      script = let
        home = builtins.getEnv "HOME";
        launchctlEnv = key: value:
          if value != null
          then "launchctl setenv ${key} ${lib.escapeShellArg (builtins.replaceStrings ["$HOME" "\${HOME}"] [home home] value)}"
          else "launchctl unsetenv ${key}";
      in lib.concatStringsSep "\n" [
        (lib.concatStringsSep "\n" (lib.mapAttrsToList launchctlEnv config.launchd.user.envVariables))
        "/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user"
      ];
      serviceConfig = {
        Label = "dev.artero.environment";
        LimitLoadToSessionType = [
          "Aqua"
          "StandardIO"
          "Background"
        ];
        RunAtLoad = true;
        # StandardErrorPath = (/. + (builtins.getEnv "HOME") + /Library/Logs/dev.artero.environment.err.log);
        # StandardOutPath = (/. + (builtins.getEnv "HOME") + /Library/Logs/dev.artero.environment.out.log);
      };
    };
  };

  launchd.daemons = {
    "dev.artero.limit.maxfiles" = {
      serviceConfig = {
        Label = "dev.artero.limit.maxfiles";
        ProgramArguments = [
          "launchctl"
          "limit"
          "maxfiles"
          "1048576"
          "1048576"
        ];
        RunAtLoad = true;
      };
    };
    "dev.artero.limit.maxproc" = {
      serviceConfig = {
        Label = "dev.artero.limit.maxproc";
        ProgramArguments = [
          "launchctl"
          "limit"
          "maxproc"
          "65536"
          "65536"
        ];
        RunAtLoad = true;
      };
    };
    "dev.artero.sysctl" = {
      serviceConfig = {
        Label = "dev.artero.sysctl";
        ProgramArguments = [
          "/usr/sbin/sysctl"
          "kern.maxfiles=1048576"
          "kern.maxfilesperproc=65536"
        ];
        RunAtLoad = true;
      };
    };
  };

  launchd.user.agents = {
    "homebrew.mxcl.openssl-osx-ca" = {
      serviceConfig = {
        Label = "homebrew.mxcl.openssl-osx-ca";
        StartInterval = 604800;
      };
    };
  };

  #endregion

  /** TODO update font caches
    printf "Updating font cache...\n"
    fc-cache -f

    printf "refreshing font database...\n"
    atsutil databases -removeUser

    printf "reloading font daemon...\n"
    killall fontd || true
  */

  homebrew = {
    enable = true;
    caskArgs = {
      appdir = "~/Applications";
      no_quarantine = true;
    };
    global = {
      autoUpdate = false;
      lockfiles = false;
    };
    onActivation = {
      autoUpdate = true;
      upgrade = true;
      cleanup = "uninstall"; # "uninstall", "zap"
    };
  };

  nix = {
    useDaemon = false;
    distributedBuilds = false;
    configureBuildUsers = false;
    package = pkgs.nix;
    settings = {
      sandbox = true;
      allowed-users = [
        "william"
      ];
      trusted-users = [
        "@_developer"
        "@admin"
        "william"
      ];
    };
  };

  programs.direnv = {
    enable = true;
    nix-direnv.enable = true;
    silent = true;
  };

  programs.fish = {
    babelfishPackage = pkgs.babelfish;
    enable = true;
    useBabelfish = true;
    vendor = {
      completions.enable = true;
      config.enable = true;
      functions.enable = true;
    };
    shellInit = ''
      ## filtered logic out of https://github.com/kidonng/nix.fish

      function __fish_nix_uninstall --on-event nix_uninstall
        set --erase NIX_{GIT_SSL_CAINFO,PATH,PROFILES,SSL_CERT_FILE}
      end

      function __fish_nix_install --on-event nix_install
        set --local packages (string match --regex "/nix/store/[\w.-]+" $PATH)
        fish_add_path --global --append $packages/bin

        if test (count $packages) != 0
          set fish_complete_path $fish_complete_path[1] \
            $packages/etc/fish/completions \
            $packages/share/fish/vendor_completions.d \
            $fish_complete_path[2..]
          set fish_function_path $fish_function_path[1] \
            $packages/etc/fish/functions \
            $packages/share/fish/vendor_functions.d \
            $fish_function_path[2..]

          for file in $packages/etc/fish/conf.d/*.fish $packages/share/fish/vendor_conf.d/*.fish
            if ! test -f (string replace --regex "^.*/" $__fish_config_dir/conf.d/ -- $file)
              source $file
            end
          end
        end
      end

      ## ensure we load nix and nix-daemon, then direnv if applicable

      test -e /nix/var/nix/profiles/default/etc/profile.d/nix.fish;
      and source /nix/var/nix/profiles/default/etc/profile.d/nix.fish

      test -e /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.fish;
      and source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.fish

      # early exit in nix-daemon.fish leaves function defined
      functions -e add_path

      command -q direnv
      and test -e .envrc
      and direnv reload
    '';
    interactiveShellInit = ''
      # not a tty session
      tty -s; or return
      test -t 0; or return

      # non-interactive session
      status --is-interactive; or return

      # VSCode terminal
      string match -q "vscode" $TERM_PROGRAM; and return

      # already inside a tmux session
      string match -q "screen*" $TERM; and return

      # tmux not found
      command -v tmux > /dev/null; or return

      # get active sessions + "defaults"
      set -l activeTmuxSessions (tmux list-sessions -F '#S' 2>/dev/null)
      set -l tmuxSessions (cat "$HOME/.tmux.sessions.conf" 2>/dev/null)
      set -l smugSessions (ls -1 $HOME/.config/smug/*.yml 2>/dev/null | ifne xargs basename -s .yml)
      set -l sessions (string join \n $activeTmuxSessions $tmuxSessions $smugSessions | sort -u | awk NF)

      # offer options
      if command -v fzf > /dev/null
        set session (string join \n $sessions | fzf --print-query --reverse -0 | tail -n1)
      else
        echo "tmux sessions: "(echo $sessions | xargs)
        echo -n "tmux session name: "
        read session
      end

      # finally, execute tmux :D
      test -n "$session"; or return

      # create session using smug if it matches a template
      command -v smug > /dev/null
      and echo $activeTmuxSessions | not grep -qFx $session
      and test -f "$HOME/.config/smug/$session.yml"
      and smug "$session" -a --detach

      # join or create plain session
      exec tmux -u new -A -s "$session" > /dev/null
    '';
  };

  programs.tmux = {
    defaultCommand = "${pkgs.fish}/bin/fish -l";
    enable = true;
    enableFzf = false;
    enableMouse = true;
    # TODO move to external file
    extraConfig = ''
      set -as terminal-features 'xterm*:extkeys'
      set -g allow-rename on
      set -g alternate-screen on
      set -g base-index 1
      set -g bell-action none
      set -g default-shell ${pkgs.fish}/bin/fish
      set -g default-terminal "screen-256color"
      set -g display-time 3000
      set -g exit-empty off
      set -g exit-unattached off
      set -g focus-events on
      set -g history-limit 50000
      set -g renumber-windows on
      set -g set-clipboard on
      set -g set-titles on
      set -g status-interval 5
      set -g status-keys vi
      set -g visual-activity on
      set -g visual-bell on
      set -g visual-silence on
      set -s escape-time 0
      set -s extended-keys on
      setw -g aggressive-resize on
      setw -g automatic-rename on
      setw -g clock-mode-style 24
      setw -g mode-keys vi
      setw -g monitor-activity on
      setw -g monitor-bell on
      setw -g monitor-silence 60
      setw -g pane-base-index 1
      setw -g xterm-keys on

      bind '"' split-window -h -c '#{pane_current_path}'
      bind %   split-window -v -c '#{pane_current_path}'
      bind C   new-session
      bind c   new-window -c '#{pane_current_path}'
      bind h   select-pane -L
      bind j   select-pane -D
      bind k   select-pane -U
      bind l   select-pane -R
      bind s   split-window -v -c '#{pane_current_path}'
      bind S   switch-client -l
      bind v   split-window -h -c '#{pane_current_path}'
      bind r   source-file /etc/tmux.conf \; display "configuration reloaded"
      bind C-y set synchronize-panes \; display "Sync #{?synchronize-panes,ON,OFF}"
      bind C-l clear-history \; display "history cleared"

      bind -n C-M-h swap-window -t -1\; select-window -t -1
      bind -n C-M-l swap-window -t +1\; select-window -t +1
      bind -n M-h   select-pane -L
      bind -n M-j   select-pane -D
      bind -n M-k   select-pane -U
      bind -n M-l   select-pane -R

      ## Cmd-s prepends sudo in fish
      unbind -n M-s
      bind -n S-s run-shell "tmux split-window -p 40 'tmux send-keys -t #{pane_id} \"$(/nix/store/hdfxz5h6kzkl3vgbbfv1l7x0ryahx26n-fzf-tmux-session)\"'"

      source-file -q ~/.tmux.conf
    '';
    tmuxOptions = {
      no-cancel-copy.text = ''
        bind-key -T copy-mode    MouseDragEnd1Pane send-keys -X copy-pipe pbcopy
        bind-key -T copy-mode-vi !                 send-keys -X copy-pipe "tr -d '\n' | pbcopy"
        bind-key -T copy-mode-vi C-j               send-keys -X copy-pipe
        bind-key -T copy-mode-vi M-y               send-keys -X copy-pipe-and-cancel "pbcopy; tmux paste-buffer"
        bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe pbcopy
        bind-key -T copy-mode-vi p                 send-keys -X copy-pipe "tmux paste-buffer"
        bind-key -T copy-mode-vi v                 send-keys -X begin-selection
        bind-key -T copy-mode-vi Y                 send-keys -X copy-pipe "tmux paste-buffer"
        bind-key -T copy-mode-vi y                 send-keys -X copy-pipe pbcopy
      '';
      plugins.text = ''
        set -g @shell_mode 'vi'
        set -g @yank_action 'copy-pipe'
        set -g @yank_selection 'clipboard'
        set -g @yank_selection_mouse 'clipboard'

        run-shell '${pkgs.tmuxPlugins.continuum}/share/tmux-plugins/continuum/continuum.tmux'
        run-shell '${pkgs.tmuxPlugins.copycat}/share/tmux-plugins/copycat/copycat.tmux'
        run-shell '${pkgs.tmuxPlugins.resurrect}/share/tmux-plugins/resurrect/resurrect.tmux'
        run-shell '${pkgs.tmuxPlugins.sessionist}/share/tmux-plugins/sessionist/sessionist.tmux'
        run-shell '${pkgs.tmuxPlugins.yank}/share/tmux-plugins/yank/yank.tmux'
      '';
    };
  };

  security.pki.certificateFiles = [
    (builtins.toString (/. + "${config.homebrew.brewPrefix}/../etc/openssl@3/cert.pem"))
    # "/etc/ssl/certs/ca-certificates.crt"
    # "${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt"
  ];

  services.nix-daemon.enable = false;

  system.authorizationDB = {
    ## Used by task_for_pid(...). Task_for_pid is called by programs requesting full
    ## control over another program for things like debugging or performance
    ## analysis. This authorization only applies if the requesting and target
    ## programs are run by the same user; it will never authorize access to the
    ## program of another user.
    "system.privilege.taskport" = "authenticate-developer";
  };

  system.defaults = {
    ActivityMonitor = {
      IconType = 5;
      OpenMainWindow = true;
      ShowCategory = 100;
      SortColumn = "CPUUsage";
      SortDirection = 0;
    };
    alf = {
      allowdownloadsignedenabled = 1;
      allowsignedenabled = 1;
      globalstate = 1;
      loggingenabled = 1;
      stealthenabled = 1;
    };
    CustomUserPreferences = {
      bluetoothaudiod = {
        "AAC Bitrate" = 320;
        "AAC max packet size" = 644;
        "Apple Bitpool Max" = 80;
        "Apple Bitpool Min" = 80;
        "Apple Initial Bitpool Min" = 80;
        "Apple Initial Bitpool" = 80;
        "Enable AAC codec" = true;
        "Enable AptX codec" = true;
        "Negotiated Bitpool Max" = 80;
        "Negotiated Bitpool Min" = 80;
        "Negotiated Bitpool" = 80;
      };
      "com.ameba.SwiftBar" = let
        rootFolder = (builtins.toString (/. + home + "/Library/Application Support/SwiftBar"));
      in {
        DisableBashWrapper = true;
        MakePluginExecutable = false;
        NSNavLastRootDirectory = rootFolder;
        PluginDebugMode = true;
        PluginDeveloperMode = true;
        PluginDirectory = rootFolder + "/plugins";
        StealthMode = true;
        StreamablePluginDebugOutput = false;
      };
      "com.apple.Accessibility" = {
        EnhancedBackgroundContrastEnabled = 1;
      };
      # "com.apple.AddressBook" = {
      #   ABNameSortingFormat = "sortingFirstName sortingLastName";
      #   ABShowDebugMenu = true;
      #   ABDefaultAddressCountryCode = "nl";
      # };
      "com.apple.AppleMultitouchTrackpad" = {
        TrackpadFiveFingerPinchGesture = 2;
        TrackpadFourFingerHorizSwipeGesture = 2;
        TrackpadFourFingerPinchGesture = 2;
        TrackpadFourFingerVertSwipeGesture = 2;
        TrackpadHandResting = true;
        TrackpadHorizScroll = 1;
        TrackpadMomentumScroll = true;
        TrackpadPinch = 1;
        TrackpadRotate = 1;
        TrackpadScroll = true;
        TrackpadThreeFingerVertSwipeGesture = 2;
        TrackpadTwoFingerDoubleTapGesture = 1;
        TrackpadTwoFingerFromRightEdgeSwipeGesture = 3;
      };
      "com.apple.appstore" = {
        ## Enable Debug Menu in the Mac App Store
        ShowDebugMenu = true;
        ## Enable the WebKit Developer Tools in the Mac App Store
        WebKitDeveloperExtras = true;
      };
      "com.apple.assistant.support" = {
        "Assistant Enabled" = false;
      };
      "com.apple.BluetoothAudioAgent" = {
        "Apple Bitpool Max (editable)" = 80;
        "Apple Bitpool Min (editable)" = 80;
        "Apple Initial Bitpool (editable)" = 80;
        "Apple Initial Bitpool Min (editable)" = 80;
        "Negotiated Bitpool Max" = 80;
        "Negotiated Bitpool Min" = 80;
        "Negotiated Bitpool" = 80;
        "Stream - Flush Ring on Packet Drop (editable)" = 0;
        "Stream - Max Outstanding Packets (editable)" = 16;
        "Stream Resume Delay" = "0.75";
      };
      "com.apple.commerce" = {
        ## Turn on app auto-update
        AutoUpdate = true;
        ## Disable the App Store to reboot machine on macOS updates
        AutoUpdateRestartRequired = false;
      };
      "com.apple.CrashReporter" = {
        DialogType = "none";
      };
      "com.apple.desktopservices" = {
        DSDontWriteNetworkStores = true;
        DSDontWriteUSBStores = true;
        UseBareEnumeration = true;
      };
      "com.apple.DiskUtility" = {
        advanced-image-options = true;
        DUDebugMenuEnabled = true;
      };
      "com.apple.dock" = {
        # TODO contribute to system.defaults.dock
        showAppExposeGestureEnabled = true;
        workspaces-auto-swoosh = true;
        wvous-bl-modifier = 0;
        wvous-br-modifier = 0;
        wvous-tl-modifier = 0;
        wvous-tr-modifier = 0;
      };
      "com.apple.driver.AppleBluetoothMultitouch.trackpad" = system.defaults.trackpad // system.defaults.CustomUserPreferences."com.apple.AppleMultitouchTrackpad";
      "com.apple.dt.Xcode" = {
        XcodeCloudUpsellPromptEnabled = false;
      };
      "com.apple.finder" = rec {
        _FXSortFoldersFirst = true;
        DesktopViewSettings = FK_StandardViewSettings;
        DisableAllAnimations = true;
        FinderSpawnTab = false;
        FK_StandardViewSettings = {
          IconViewSettings = {
            arrangeBy = "grid";
            gridSpacing = 1.0;
            iconSize = 64.0;
            showItemInfo = true;
            # labelOnBottom = false;
          };
        };
        FXEnableRemoveFromICloudDriveWarning = false;
        FXInfoPanesExpanded = {
          General = true;
          MetaData = false;
          Name = true;
          OpenWith = true;
          Preview = false;
          Privileges = false;
        };
        NewWindowTarget = "PfHm";
        NewWindowTargetIsHome = true;
        NewWindowTargetPath = ""; # NewWindowTargetPath: "file://${HOME}/"
        OpenWindowForNewRemovableDisk = true;
        QLEnableTextSelection = true;
        ShowExternalHardDrivesOnDesktop = true;
        ShowHardDrivesOnDesktop = false;
        ShowMountedServersOnDesktop = false;
        ShowRecentTags = false;
        ShowRemovableMediaOnDesktop = true;
        StandardViewSettings = FK_StandardViewSettings;
        WarnOnEmptyTrash = false;
      };
      "com.apple.frameworks.diskimages" = {
        auto-open-ro-root = true;
        auto-open-rw-root = true;
        skip-verify = true;
        skip-verify-locked = true;
        skip-verify-remote = true;
      };
      "com.apple.GameController" = {
        bluetoothPrefsMenuLongPressAction = 0;
        bluetoothPrefsShareLongPressSystemGestureMode = 1;
      };
      "com.apple.helpviewer" = {
        DevMode = true;
      };
      "com.apple.iCal" = {
        privacyPaneHasBeenAcknowledgedVersion = 4;
        IncludeDebugMenu = true;
        "n days of week" = 7;
        "first day of week" = 0;
        "scroll by weeks in week view" = 1;
        "first minute of work hours" = 540;
        "last minute of work hours" = 1020;
        "number of hours displayed" = 10;
        SharedCalendarNotificationsDisabled = true;
        InvitationNotificationsDisabled = false;
        "Show heat map in Year View" = false;
        OpenEventsInWindowType = false;
        WarnBeforeSendingInvitations = false;
        CalendarSidebarShown = true;
        "add holiday calendar" = true;
        "Default duration in minutes for new event" = 30.0;
        "display birthdays calendar" = true;
        "Show time in Month View" = true;
        "Show Week Numbers" = false;
        "TimeZone support enabled" = true;
        ShowDeclinedEvents = false;
        TimeToLeaveEnabled = true;
      };
      "com.apple.ImageCapture" = {
        disableHotPlug = true;
      };
      "com.apple.messageshelper.MessageController" = {
        SOInputLineSettings = {
          automaticEmojiSubstitutionEnablediMessage = false;
          automaticQuoteSubstitutionEnabled = false;
          continuousSpellCheckingEnabled = false;
        };
      };
      "com.apple.NetworkBrowser" = {
        BrowseAllInterfaces = true;
      };
      "com.apple.PowerChime" = {
        ChimeOnAllHardware = false;
      };
      "com.apple.print.PrintingPrefs" = {
        "Quit When Finished" = true;
      };
      "com.apple.QuickTimePlayerX" = {
        MGPlayMovieOnOpen = true;
      };
      "com.apple.SafariTechnologyPreview" = {
        "com.apple.Safari.ContentPageGroupIdentifier.WebKit2AllowsInlineMediaPlayback" = false;
        WebKitMediaPlaybackAllowsInline = false;
      };
      "com.apple.ScriptEditor2" = {
        ApplePersistence = false;
      };
      "com.apple.security.authorization" = {
        ignoreArd = true;
      };
      "com.apple.Siri" = {
        StatusMenuVisible = false;
        VoiceTriggerUserEnabled = false;
      };
      "com.apple.SoftwareUpdate" = {
        ## Enable the automatic update check
        AutomaticCheckEnabled = true;
        ## Download newly available updates in background
        AutomaticDownload = 1;
        ## Don't download apps purchased on other Macs
        ConfigDataInstall = 0;
        ## Install System data files & security updates
        CriticalUpdateInstall = 1;
        ## Check for software updates daily, not just once per week
        ScheduleFrequency = 1;
      };
      "com.apple.spotlight" = {
        orderedItems = [
          { enabled = 1; name = "APPLICATIONS"; }
          { enabled = 1; name = "MENU_EXPRESSION"; }
          { enabled = 1; name = "MENU_CONVERSION"; }
          { enabled = 1; name = "MENU_DEFINITION"; }
          { enabled = 1; name = "SYSTEM_PREFS"; }
          { enabled = 1; name = "BOOKMARKS"; }
          { enabled = 1; name = "DIRECTORIES"; }
          { enabled = 0; name = "PDF"; }
          { enabled = 0; name = "FONTS"; }
          { enabled = 0; name = "DOCUMENTS"; }
          { enabled = 0; name = "MESSAGES"; }
          { enabled = 0; name = "CONTACT"; }
          { enabled = 0; name = "EVENT_TODO"; }
          { enabled = 0; name = "IMAGES"; }
          { enabled = 0; name = "MUSIC"; }
          { enabled = 0; name = "MOVIES"; }
          { enabled = 0; name = "PRESENTATIONS"; }
          { enabled = 0; name = "SPREADSHEETS"; }
          { enabled = 0; name = "SOURCE"; }
          { enabled = 0; name = "MENU_OTHER"; }
          { enabled = 0; name = "MENU_WEBSEARCH"; }
          { enabled = 0; name = "MENU_SPOTLIGHT_SUGGESTIONS"; }
        ];
        showedFTE = 1;
        showedLearnMore = 1;
      };
      "com.apple.systemuiserver" = {
        "NSStatusItem Visible com.apple.menuextra.appleuser" = false;
        "NSStatusItem Visible com.apple.menuextra.bluetooth" = false;
        "NSStatusItem Visible com.apple.menuextra.clock" = false;
        "NSStatusItem Visible com.apple.menuextra.TimeMachine" = true;
        "NSStatusItem Visible com.apple.menuextra.volume" = false;
        dontAutoLoad = [
          "/System/Library/CoreServices/Menu Extras/AirPort.menu"
          "/System/Library/CoreServices/Menu Extras/VPN.menu"
          "/System/Library/CoreServices/Menu Extras/WWAN.menu"
          # "/System/Library/CoreServices/Menu Extras/Clock.menu"
          # "/System/Library/CoreServices/Menu Extras/Displays.menu"
          # "/System/Library/CoreServices/Menu Extras/DwellControl.menu"
          # "/System/Library/CoreServices/Menu Extras/Eject.menu"
          # "/System/Library/CoreServices/Menu Extras/ExpressCard.menu"
          # "/System/Library/CoreServices/Menu Extras/GamePolicyExtra.menu"
          # "/System/Library/CoreServices/Menu Extras/PPP.menu"
          # "/System/Library/CoreServices/Menu Extras/PPPoE.menu"
          # "/System/Library/CoreServices/Menu Extras/SafeEjectGPUExtra.menu"
          # "/System/Library/CoreServices/Menu Extras/User.menu"
          # "/System/Library/CoreServices/Menu Extras/Volume.menu"
        ];
        menuExtras = [
          "/System/Library/CoreServices/Menu Extras/TimeMachine.menu"
        ];
      };
      "com.apple.Terminal" = {
        SecureKeyboardEntry = true;
        Shell = "${pkgs.fish}/bin/fish";
        ShowLineMarks = 0;
        StringEncodings = ["4"];
      };
      "com.apple.TextEdit" = {
        PlainTextEncoding = 4;
        PlainTextEncodingForWrite = 4;
        RichText = 0;
      };
      "com.apple.TextInputMenu" = {
        visible = false;
      };
      "com.apple.TimeMachine" = {
        DoNotOfferNewDisksForBackup = true;
      };
      # "com.apple.universalaccess" = {
      #   reduceTransparency = 1;
      # };
      NSGlobalDomain = {
        ## TODO com.apple.finder.SyncExtensions
        AppleEnableMenuBarTransparency = false;
        AppleLanguages = ["en-NL" "en-GB" "pt-BR"];
        AppleLocale = "en_GB@currency=EUR";
        CGFontRenderingFontSmoothingDisabled = false;
        NSAllowContinuousSpellChecking = false;
        NSPersonNameDefaultDisplayNameOrder = 1;
        QLPanelAnimationDuration = 0;
        WebKitDeveloperExtras = true;
      };
      "com.google.Chrome.canary" = system.defaults.CustomUserPreferences."org.chromium.Chromium";
      "com.google.Chrome" = system.defaults.CustomUserPreferences."org.chromium.Chromium";
      "org.chromium.Chromium" = {
        AppleEnableMouseSwipeNavigateWithScrolls = false;
        AppleEnableSwipeNavigateWithScrolls = false;
        DisablePrintPreview = true;
        PMPrintingExpandedStateForPrint2 = true;
      };
    };
    CustomSystemPreferences = {
      "'/Library/Application Support/CrashReporter/DiagnosticMessagesHistory'" = {
        AutoSubmit = false;
        SeedAutoSubmit = false;
        AutoSubmitVersion = 4;
        ThirdPartyDataSubmit = false;
        ThirdPartyDataSubmitVersion = 4;
      };
      "/Library/Preferences/com.apple.iokit.AmbientLightSensor" = {
        "Automatic Display Enabled" = false;
      };
      "/Library/Preferences/com.apple.loginwindow" = {
        AdminHostInfo = "HostName";
      };
      "/Library/Preferences/com.apple.security.libraryvalidation" = {
        DisableLibraryValidation = true;
      };
      "/Library/Preferences/com.apple.security.smartcard" = {
        allowSmartCard = true;
        checkCertificateTrust = 3;
        DisabledTokens = []; ## pluginkit -m -p com.apple.ctk-tokens
        # Logging = false;
        # oneCardPerUser = false;
        UserPairing = true;
      };
      "/Library/Preferences/com.apple.windowserver" = {
        DisplayResolutionEnabled = true;
      };
    };
    dock = {
      autohide = true;
      autohide-delay = 0.0;
      autohide-time-modifier = 0.0;
      dashboard-in-overlay = true;
      enable-spring-load-actions-on-all-items = true;
      expose-animation-duration = 0.1;
      magnification = true;
      mineffect = "genie";
      minimize-to-application = true;
      mouse-over-hilite-stack = true;
      mru-spaces = false;
      show-process-indicators = true;
      show-recents = false;
      showhidden = true;
      tilesize = 72;
      wvous-bl-corner = null;
      wvous-br-corner = null;
      wvous-tl-corner = null;
      wvous-tr-corner = null;
    };
    finder = {
      _FXShowPosixPathInTitle = false;
      AppleShowAllFiles = false;
      FXDefaultSearchScope = "SCcf";
      FXEnableExtensionChangeWarning = false;
      FXPreferredViewStyle = "Nlsv";
      ShowPathbar = true;
      ShowStatusBar = true;
    };
    LaunchServices = {
      LSQuarantine = false;
    };
    loginwindow = {
      DisableConsoleAccess = true;
      GuestEnabled = false;
      PowerOffDisabledWhileLoggedIn = false;
      RestartDisabledWhileLoggedIn = false;
      ShutDownDisabledWhileLoggedIn = false;
    };
    NSGlobalDomain = {
      "com.apple.mouse.tapBehavior" = 1;
      "com.apple.sound.beep.feedback" = 0;
      "com.apple.springing.delay" = 0.0;
      "com.apple.springing.enabled" = true;
      # NSTextInsertionPointBlinkPeriod = 9999999999999999;
      AppleFontSmoothing = 1;
      AppleInterfaceStyle = "Dark";
      AppleInterfaceStyleSwitchesAutomatically = false;
      AppleKeyboardUIMode = 3;
      AppleMeasurementUnits = "Centimeters";
      AppleMetricUnits = 1;
      ApplePressAndHoldEnabled = false;
      AppleShowAllExtensions = false;
      AppleShowScrollBars = "WhenScrolling";
      AppleWindowTabbingMode = "always";
      InitialKeyRepeat = 15;
      KeyRepeat = 4;
      NSAutomaticCapitalizationEnabled = false;
      NSAutomaticDashSubstitutionEnabled = false;
      NSAutomaticPeriodSubstitutionEnabled = false;
      NSAutomaticQuoteSubstitutionEnabled = false;
      NSAutomaticSpellingCorrectionEnabled = false;
      NSAutomaticWindowAnimationsEnabled = false;
      NSDisableAutomaticTermination = true;
      NSDocumentSaveNewDocumentsToCloud = false;
      NSNavPanelExpandedStateForSaveMode = true;
      NSNavPanelExpandedStateForSaveMode2 = true;
      NSScrollAnimationEnabled = true;
      NSTableViewDefaultSizeMode = 2;
      NSTextShowsControlCharacters = true;
      NSUseAnimatedFocusRing = false;
      NSWindowResizeTime = 0.001;
      PMPrintingExpandedStateForPrint = true;
      PMPrintingExpandedStateForPrint2 = true;
    };
    screencapture = {
      disable-shadow = true;
      location = "~/Library/Mobile Documents/com~apple~CloudDocs/Screenshots";
      type = "png";
    };
    screensaver = {
      askForPassword = true;
      askForPasswordDelay = 0;
    };
    SoftwareUpdate = {
      AutomaticallyInstallMacOSUpdates = true;
    };
    trackpad = {
      Clicking = false;
      TrackpadRightClick = true;
      TrackpadThreeFingerTapGesture = 2;
    };
  };

  system.pmset = {
    all = {
      autorestart = 1;
      displaysleep = 2;
      hibernatemode = 0;
      highstandbythreshold = 50;
      lidwake = 1;
      standbydelay = 0;
      standbydelayhigh = 3600;
      standbydelaylow = 900;
    };
    battery = {
      sleep = 5;
    };
    charger = {
      sleep = 0;
    };
  };

  # Used for backwards compatibility, please read the changelog before changing.
  # $ darwin-rebuild changelog
  system.stateVersion = 4;
}
