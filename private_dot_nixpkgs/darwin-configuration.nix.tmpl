# chezmoi:template:left-delimiter="#{{" right-delimiter=}}
{ pkgs
, config
, lib
, ...
}: {
	imports = [
		./modules
		./settings
		#{{- if .environment.home }}
		./darwin/home-configuration.nix
		./settings/home
		#{{- else if .environment.work }}
		./darwin/work-configuration.nix
		./settings/work
		#{{- end }}
	];

	nixpkgs.overlays = [
		(self: super: {
			fortune = super.fortune.override {
				withOffensive = true;
			};
		})
		(final: prev: if (prev ? unstable) then prev else {
			unstable = import <unstable> { pkgs = prev; };
		})
		(final: prev: if (prev ? nur) then prev else {
			nur = import <nur> { pkgs = prev; };
		})
	];

	environment.extraOutputsToInstall = [
		"info"
	];

	environment.systemPackages = [
		# pkgs.asciinema
		pkgs.bat
		pkgs.coreutils
		pkgs.envsubst
		pkgs.expect
		pkgs.fd
		pkgs.fortune
		pkgs.fswatch
		pkgs.gawk
		pkgs.graphviz
		pkgs.grc
		pkgs.jq
		pkgs.moreutils
		pkgs.neo-cowsay
		pkgs.powerline-go
		pkgs.ripgrep
		# pkgs.smug
		pkgs.tlrc
		pkgs.yazi
		pkgs.zellij
		pkgs.unstable.pet
	];

	homebrew.brews = [
		"gh" ## used internally by brew taps
		"mas" ## used internally by brew masApps
	];

	homebrew.casks = [
		"anytype"
		"automatic-mouse-mover"
		"bartender"
		"betterzip"
		"bruno"
		"das-keyboard-q"
		"displaylink-login-screen-ext"
		"displaylink-manager" ## TODO globalCask
		"elgato-stream-deck"
		"finicky"
		"firefox"
		"flux"
		"gas-mask"
		"gimp"
		"hammerspoon"
		"jabra-direct" ## TODO globalCask
		"jtool2"
		"kitty"
		"launchpad-manager"
		"macfuse"
		"provisionql"
		"qlcolorcode"
		"qlmarkdown"
		"qlvideo"
		"spotify"
		"suspicious-package"
		"swiftbar"
		"the-unarchiver"
		"uninstallpkg"
		"zap"
	];

	homebrew.masApps = {
	};

	homebrew.taps = [
		"homebrew/bundle"
		"homebrew/services"
		"wwmoraes/tap"
	];

	environment.systemPath = lib.mkBefore [
		"$HOME/.local/bin"
		"$HOME/.cargo/bin"
		"$HOME/.cabal/bin"
	];

	environment.variables = {
		LANG = "en_GB.UTF-8";
		LC_ALL = "en_GB.UTF-8";
		LC_COLLATE = "en_GB.UTF-8";
		LC_CTYPE = "en_GB.UTF-8";
		LC_MESSAGES = "en_GB.UTF-8";
		LC_MONETARY = "en_GB.UTF-8";
		LC_NUMERIC = "en_GB.UTF-8";
		LC_TIME = "en_GB.UTF-8";
		LESS = "-isRMSFX --tilde";
		LSCOLORS = "exfxcxdxbxegedabagacad";
		MANPAGER = "less";
		# NIX_PATH = config.nix.nixPath;
		# NIX_PROFILES = (lib.concatStringsSep " " (lib.reverseList config.environment.profiles));
		# NIX_USER_PROFILE_DIR = "/nix/var/nix/profiles/per-user/$USER";
		PAGER = "less";
	};

	launchd.user.agents = {
		# https://gist.github.com/paultheman/808be117d447c490a29d6405975d41bd
		# https://hidutil-generator.netlify.app/
		"dev.artero.hidutil.BTRemoteShutter" = {
			serviceConfig = {
				Label = "dev.artero.hidutil.BTRemoteShutter";
				LaunchEvents = {
					"com.apple.iokit.matching" = {
						"com.apple.bluetooth.hostController" = {
							IOMatchLaunchStream = true;
							IOProviderClass = "IOBluetoothHCIController";
							idProduct = 12850; # 0x3232
							idVendor = 1452; # 0x5ac
						};
					};
				};
				# hidutil property --matching '{"VendorID":1452,"ProductID":12850}' --set '{"UserKeyMapping":[{"HIDKeyboardModifierMappingDst":30064771152,"HIDKeyboardModifierMappingSrc":30064771112},{"HIDKeyboardModifierMappingDst":30064771151,"HIDKeyboardModifierMappingSrc":51539607785}]}''
				# hidutil property --matching '{"ProductID":12850,"VendorID":1452}' --get "UserKeyMapping"
				ProgramArguments = [
					# "/usr/local/bin/xpc_set_event_stream_handler"
					"/usr/bin/hidutil"
					"property"
					"--matching"
					(builtins.toJSON {
						VendorID = 1452; # 0x5ac
						ProductID = 12850; # 0x3232
					})
					"--set"
					(builtins.toJSON {
						UserKeyMapping = [
							{
								HIDKeyboardModifierMappingSrc = 30064771112; # 0x700000028 return_or_enter
								HIDKeyboardModifierMappingDst = 30064771152; # 0x700000050 left_arrow
							}
							{
								HIDKeyboardModifierMappingSrc = 51539607785; # 0xC000000E9 volume_increment
								HIDKeyboardModifierMappingDst = 30064771151; # 0x70000004F right_arrow
							}
						];
					})
				];
				RunAtLoad = true;
			};
		};

	};

	system.activationScripts.postActivation.text = (lib.concatLines (map lib.trim (lib.splitString "\n" ''
		printf >&2 "cleaning up root mail...\n"
		echo 'd *' | mailx > /dev/null 2>&1 || true

		printf >&2 "reloading quicklook plugins...\n"
		qlmanage -r

		printf >&2 "reloading system settings...\n"
		/System/Library/PrivateFrameworks/SystemAdministration.framework/Resources/activateSettings -u

		printf >&2 "reloading preferences...\n"
		killall cfprefsd
	'')));

	launchd.user.agents = {
		"dev.artero.environment" = {
			script = let
				home = builtins.getEnv "HOME";
				launchctlEnv = key: value:
					if value != null
					then "launchctl setenv ${key} ${lib.escapeShellArg (builtins.replaceStrings ["$HOME" "\${HOME}"] [home home] value)}"
					else "launchctl unsetenv ${key}";
			in lib.concatStringsSep "\n" [
				(lib.concatStringsSep "\n" (lib.mapAttrsToList launchctlEnv config.launchd.user.envVariables))
				## nuclear option that takes quite a few secs; not needed usually
				# "/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user"
			];
			serviceConfig = {
				Label = "dev.artero.environment";
				LimitLoadToSessionType = [
					"Aqua"
					"StandardIO"
					"Background"
				];
				RunAtLoad = true;
				# StandardErrorPath = (/. + (builtins.getEnv "HOME") + /Library/Logs/dev.artero.environment.err.log);
				# StandardOutPath = (/. + (builtins.getEnv "HOME") + /Library/Logs/dev.artero.environment.out.log);
			};
		};
	};

	# launchd.daemons = {
	#   "dev.artero.limit.maxfiles" = {
	#     serviceConfig = {
	#       Label = "dev.artero.limit.maxfiles";
	#       ProgramArguments = [
	#         "launchctl"
	#         "limit"
	#         "maxfiles"
	#         "1048576"
	#         "1048576"
	#       ];
	#       RunAtLoad = true;
	#     };
	#   };
	#   "dev.artero.limit.maxproc" = {
	#     serviceConfig = {
	#       Label = "dev.artero.limit.maxproc";
	#       ProgramArguments = [
	#         "launchctl"
	#         "limit"
	#         "maxproc"
	#         "65536"
	#         "65536"
	#       ];
	#       RunAtLoad = true;
	#     };
	#   };
	#   "dev.artero.sysctl" = {
	#     serviceConfig = {
	#       Label = "dev.artero.sysctl";
	#       ProgramArguments = [
	#         "/usr/sbin/sysctl"
	#         "kern.maxfiles=1048576"
	#         "kern.maxfilesperproc=65536"
	#       ];
	#       RunAtLoad = true;
	#     };
	#   };
	# };

	programs.direnv = {
		enable = true;
		nix-direnv.enable = true;
		silent = true;
	};

	# Used for backwards compatibility, please read the changelog before changing.
	# $ darwin-rebuild changelog
	system.stateVersion = 4;
}
