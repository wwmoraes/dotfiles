[alias]
# Needed for piping
  git = !exec git

# Human Aliases
  unstage = reset -q HEAD --
  discard = checkout --
  uncommit = reset --mixed HEAD~
  amend = commit --amend --all --no-edit

# almost-human aliases
  nuke = reset --hard
  yolo = push --force

# Shorter versions and true aliases
  s = status
  co = checkout
  pick = cherry-pick
  cc = !koji
  k = !koji

# rebase goodies
  r = rebase --autosquash
  ri = rebase --autosquash -i
  rr = rebase --autosquash --root
  rc = rebase --continue
  ra = rebase --abort

# returns how much the current HEAD is from the target branch
  rel = "!f() { git rev-list --left-right --count HEAD...$1 | sed 's/\t/↑↓/'; }; f"

  local-prune = "!git fetch -p && for branch in $(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}'); do git branch -D $branch; done"

# Goodies
  c = commit -am
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --
  reup = rebase-update # depot_tools specific
  seek-n-blame = "!f() { git blame $(git log --pretty=%H --diff-filter=AM -1 -- "$1") -- "$1"; }; f"
  who-deleted = "!f() { git show -s --pretty=medium $(git log --pretty=%H -1 --diff-filter=D -- "$1"); }; f"
  last-deleted = "!f() { git log --pretty=%H -${1:-1} --diff-filter=D | xargs -n1 git diff-tree --no-commit-id --name-only --diff-filter=D -r | sort -u; }; f"

# show last commit - gotta yolo thinking with your HEAD ;)
  head = log --pretty=oneline HEAD^..HEAD

# Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat --color-words"

# Fixup staged changes to specified commit
  fixup = !sh -c 'REV=$(git rev-parse $1) && git commit --fixup $@ && git rebase -i --autosquash $REV^' -

# Commit staged changes into specific commit w/o opening editor
  fixit = "!f() { git commit --fixup=$1; GIT_SEQUENCE_EDITOR=: git rebase -i --autosquash $1~1; }; f"

# Automatically squashes fixup commits
  fixall = "!f() { COUNT=$(git rev-list --left-right --count $(git branch --show-current)...$(git rev-parse --abbrev-ref --symbolic-full-name @{u}) | xargs | cut -d' ' -f1); git rebase --autosquash HEAD~$COUNT; }; f"

# remove changes
  scraplastcommit = reset --hard HEAD^

# keep your changes
  unwindlastcommit = reset --soft HEAD^

# generate a changeset to reverse a previous commit.
  reverselastcommit = revert HEAD
  nevermind = !git reset --hard HEAD && git clean -d -f
  graph = log --graph -10 --branches --remotes --tags  --format=format:'%Cgreen%h %Creset• %<(75,trunc)%s (%cN, %cr) %Cred%d' --date-order
  precommit = diff --cached --diff-algorithm=minimal -w

# List commits in short form, with colors and branch/tag annotations.
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]%Creset" --decorate

# List commits showing changed files
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]%Creset" --decorate --numstat

# List with no colors if you need to chain the out put with Unix pipes:
  lnc = log --pretty=format:"%h\\ %s\\ [%cn]"

# oneline commits showing dates
  lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]%Creset" --decorate --date=short

# default look for short git log:
  le = log --oneline --decorate

# see all the commits related to a file, with the diff of the changes
  filelog = log -u
  fl = log -u

# check what was in the last commit
  dl = "!git ll -1"

# Show a diff last commit:
  dlc = diff --cached HEAD^

# Diff uncommited changes
  diffunc = diff --cached

# Show content (full diff) of a commit given a revision:
  dr  = "!f() { git diff "$1"^.."$1"; }; f"
  lc  = "!f() { git ll "$1"^.."$1"; }; f"
  diffr  = "!f() { git diff "$1"^.."$1"; }; f"

# Find a file path in codebase
  f = "!git ls-files | grep -i"

# list deleted files
  find-deleted = "!git log --diff-filter=D --summary | grep delete | cut -d' ' -f5- | sort -h"
  cat-deleted = "!f() { git cat-file -p "$(git log --pretty=%H --diff-filter=AM -1 -- "$1"):$1"; }; f"

# Search/grep your entire codebase for a string:
  grep = grep -Ii
  gr = grep -Ii

# Grep from root folder
  gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

# show last tag
  lasttag = describe --tags --abbrev=0
  lt = describe --tags --abbrev=0

# show recent branches
  short-recent = "for-each-ref --count=25 --sort=committerdate refs/heads/ --format='%(refname:short)'"

# fuzzy add using fzf
  fadd = "!git ls-files -m -o --exclude-standard | fzf --print0 -0 -m --preview 'git diff --color=always {}' --preview-window=down:10:wrap | xargs -0 -t -o git add --all"

# fuzzy switch branch...  /fish/functions/fco.fish seems better
  fco = "!git branch -a | awk '$1 == \"*\" {system(\"tput setaf 3\");print $2;system(\"tput sgr0\");next};{print $1}' | fzf --ansi | sed 's|^remotes/|--track |' | xargs -t git checkout"

# fuzzy delete branch
  fdel = "!git branch -a | awk '$1 == \"*\" {system(\"tput setaf 3\");print $2;system(\"tput sgr0\");next};{print $1}' | fzf --ansi -m | awk '$0 ~ /^remotes/ {print \"push origin --delete\",$0;next}{print \"branch -D\",$0}' | sed 's|remotes/origin/||g' | ifne xargs -L 1 git"

# fuzzy fix staged changes into existing commit
  ffix = !HASH=`git log --pretty=oneline | head -n 100 | fzf` && git fixit `echo ${HASH} | awk '{ print $1 }'`

# fuzzy rebase interactive choose existing commit to start from
  frebase = !HASH=`git log --pretty=oneline | head -n 100 | fzf` && git rebase -i `echo ${HASH} | awk '{ print $1 }'`^

# fuzzy edit untracked/modified files
  fed = !FILES=`git status -s | awk '{ print $2 }' | fzf -x -m` && code ${FILES}

# fuzzy edit files in conflict state
  fedconflicts = !FILES=`git status -s | grep '^[UMDA]\\{2\\} ' | awk '{ print $2 }' | fzf -x -m` && code ${FILES}

# fuzzy gitgrep working tree for pattern and choose file(s) to edit
  fgrep = !sh -c 'FILES=`git grep -l -A 0 -B 0 $1 $2 | fzf -x -m` && code `echo ${FILES} | cut -d':' -f1 | xargs`' -

# fuzzy select past commit, and edit current state of file(s) changed in it
  fedlog = !HASH=`git log --pretty=oneline | head -n 50 | fzf` && HASHZ=`echo ${HASH} | awk '{ print $1 }'` && FILES=`git show --pretty='format:' --name-only $HASHZ | grep -v -e '^$' | fzf -x -m` && code ${FILES}

# fuzzy reset back to prior commit
  freset = !HASH=`git log --pretty=oneline | head -n 50 | fzf` && git reset --soft `echo ${HASH} | awk '{ print $1 }'`^

# update hooks
  hooks = "!f() { local templateDir=$(git config --get --path init.templatedir); local gitDir=$(git rev-parse --git-dir); rsync --archive --verbose --compress --cvs-exclude \"$templateDir/hooks/\" \"$gitDir/hooks\" --delete; }; f"

# purge a file from history (BEWARE: this option REWRITES all commits)
  purge = "!f() { git filter-branch --force --index-filter \"git rm --cached --ignore-unmatch "$1"\" --prune-empty --tag-name-filter cat -- --all; }; f"

# grep changes using a regexp and since the provided time
  tgrep = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && FILES=`git ls-files | fzf -m` && git rev-list --all --since=$2 | xargs -I% git grep $1 % -- $FILES; cd $A; }; f"

  subrm = "!f(){ git submodule deinit -f $1; git rm -rf $1 || true; rm -rf .git/modules/$1; git config -f .git/config --remove-section submodule.$1; git config -f .gitmodules --remove-section submodule.$1 || true; }; f"

  authors = shortlog --summary --numbered --email --all

  fdiff = "!f() { git diff --name-only --color=always $@ | fzf -m --ansi --preview \"git diff $@ --color=always -- {-1}\" | ifne xargs git diff $@ --; }; f"

  review = "!f() { BRANCHES=$(git branch --no-column --all --format=\"%(refname:lstrip=2)\") && BASE=$(echo $BRANCHES | tr ' ' '\n' | fzf --prompt='Base branch: ') && TARGET=$(echo $BRANCHES | tr ' ' '\n' | fzf --prompt='Target branch: ') && echo \"git fdiff $BASE..$TARGET\" && git fdiff $BASE..$TARGET; }; f"
