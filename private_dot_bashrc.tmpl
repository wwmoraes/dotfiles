# shellcheck shell=bash

# skip if not running interactively
test "${-#*i}" == "$-" && return

# don't put duplicate lines or lines starting with space in the history
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# sets history length
HISTSIZE=1000
HISTFILESIZE=2000

# -a: Append to history after each command, not only after session close
# -n: re-read the history file i.e. share history between terminals
PROMPT_COMMAND='history -a; history -n'

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar 2>/dev/null

# make less more friendly for non-text input files, see lesspipe(1)
test -x /usr/bin/lesspipe && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

color_prompt=
# enable prompt colors if the terminal supports it
case "${TERM}" in
  xterm-color|*-256color) color_prompt=yes;;
esac

# check if terminal has color support
if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
  # We have color support; assume it's compliant with Ecma-48
  # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
  # a case would tend to support setf rather than setaf.)
  color_prompt=yes
else
  color_prompt=
fi

CHECKMARK=$(printf "\xE2\x9C\x94")
CROSSMARK=$(printf "\xE2\x9C\x96")
RIGHTWARDS_ARROW=$(printf "\xE2\x9E\xBE")

parse_git_branch() {
  HASCHANGES=
  if [ "$(git status -s 2> /dev/null | wc -l)" -gt 0 ]; then
    HASCHANGES="*"
  fi

  git branch 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/(\1${HASCHANGES})/"
}

parse_last_retcode() {
  STATUS=$?
  if [ "$1" = "colored" ]; then
    # shellcheck disable=SC2181
    test "${STATUS}" -eq 0 && printf "\e[32m%s\e[39m" "${CHECKMARK}" || printf "\e[31m%s\e[39m" "${CROSSMARK}"
  else
    # shellcheck disable=SC2181
    test "${STATUS}" -eq 0 && printf "%s" "${CHECKMARK}" || printf "%s" "${CROSSMARK}"
  fi
}

if [ "${color_prompt}" = "yes" ]; then
  PS1=$'\[$(parse_last_retcode colored)\] ${debian_chroot:+($debian_chroot)}\[\e[1;34m\]\W\[\e[33m\]$(parse_git_branch)\[\e[m\] \[\e[1;39m\]\$\[\e[m\] ${RIGHTWARDS_ARROW} '
else
  PS1=$'$(parse_last_retcode) ${debian_chroot:+($debian_chroot)}\W$(parse_git_branch) \$ ${RIGHTWARDS_ARROW} '
fi
unset color_prompt

# If this is an xterm set the title
case "${TERM}" in
  xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+(${debian_chroot})}\W $\a\]${PS1}";;
  *);;
esac

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    # shellcheck disable=SC1090
    . ~/.bash_aliases
fi

# nix-darwin
if [ -e /etc/static/bashrc ]; then
  . /etc/static/bashrc;
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    # shellcheck disable=SC1091
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    # shellcheck disable=SC1091
    . /etc/bash_completion
  fi
fi

set +eum # restore default shell "looseness"

# fzf & bashfu sorcery
#   lists tmux sessions to attach to
#   allows creating sessions by using the fzf query
#   falls back to main session if something goes wrong (e.g. no fzf installed)

function launchTmux {
  # skip non-tty sessions
  tty -s || return
  test -t 0 || return

  # skip non-interactive sessions
  test "${-#*i}" != "$-" || return

  # skip VSCode terminal
  test "${TERM_PROGRAM#*vscode}" != "${TERM_PROGRAM}" && return

  # skip if on a tmux session
  test -n "${TMUX}" && return

  # skip if on a screen session
  test "${TERM#*screen}" != "${TERM}" && return

  # returns if there's no tmux bin
  command -v tmux > /dev/null || return

  tmuxSessionList() {
    # TODO use mapfile or read -a instead
    # shellcheck disable=SC2207
    sessions=("main" $(tmux list-sessions -F '#S' 2>/dev/null) $(find -L "${HOME}/.config/smug" -mindepth 1 -maxdepth 1 -name "*.yaml" -exec basename -s .yaml {} \; 2> /dev/null))
    printf '%s\n' "${sessions[@]}" | sort | uniq | awk NF
  }

  # check if fzf exists only once
  if _=$(command -v fzf > /dev/null); then
    session=$(tmuxSessionList | \
      fzf --print-query --reverse -0 | \
      tail -n1)
  else
    printf "tmux sessions: %s\n" "$(tmuxSessionList | xargs)"
    printf "tmux session name: "
    read -r session
  fi

    test -n "${session}" || return

    if command -v smug > /dev/null && [ -f "${HOME}/.config/smug/${session}.yaml" ]; then
      exec smug "${session}" -a
    else
      exec tmux -u new -A -s "${session}" > /dev/null
    fi
}

launchTmux
