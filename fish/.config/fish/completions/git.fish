complete -ec git

### Vanilla git commands
## Git high-level commands
# Git main porcelain commands
complete -xc git -a add -d "Add file contents to the index"
complete -xc git -a am -d "Apply a series of patches from a mailbox"
complete -xc git -a archive -d "Create an archive of files from a named tree"
complete -xc git -a bisect -d "Use binary search to find the commit that introduced a bug"
complete -xc git -a branch -d "List, create, or delete branches"
complete -xc git -a bundle -d "Move objects and refs by archive"
complete -xc git -a checkout -d "Switch branches or restore working tree files"
complete -xc git -a cherry-pick -d "Apply the changes introduced by some existing commits"
complete -xc git -a citool -d "Graphical alternative to git-commit"
complete -xc git -a clean -d "Remove untracked files from the working tree"
complete -xc git -a clone -d "Clone a repository into a new directory"
complete -xc git -a commit -d "Record changes to the repository"
complete -xc git -a describe -d "Give an object a human readable name based on an available ref"
complete -xc git -a diff -d "Show changes between commits, commit and working tree, etc"
complete -xc git -a fetch -d "Download objects and refs from another repository"
complete -xc git -a format-patch -d "Prepare patches for e-mail submission"
complete -xc git -a gc -d "Cleanup unnecessary files and optimize the local repository"
complete -xc git -a grep -d "Print lines matching a pattern"
complete -xc git -a gui -d "A portable graphical interface to Git"
complete -xc git -a init -d "Create an empty Git repository or reinitialize an existing one"
complete -xc git -a log -d "Show commit logs"
complete -xc git -a merge -d "Join two or more development histories together"
complete -xc git -a mv -d "Move or rename a file, a directory, or a symlink"
complete -xc git -a notes -d "Add or inspect object notes"
complete -xc git -a pull -d "Fetch from and integrate with another repository or a local branch"
complete -xc git -a push -d "Update remote refs along with associated objects"
complete -xc git -a rebase -d "Reapply commits on top of another base tip"
complete -xc git -a reset -d "Reset current HEAD to the specified state"
complete -xc git -a revert -d "Revert some existing commits"
complete -xc git -a rm -d "Remove files from the working tree and from the index"
complete -xc git -a shortlog -d "Summarize git log output"
complete -xc git -a show -d "Show various types of objects"
complete -xc git -a stash -d "Stash the changes in a dirty working directory away"
complete -xc git -a status -d "Show the working tree status"
complete -xc git -a submodule -d "Initialize, update or inspect submodules"
complete -xc git -a tag -d "Create, list, delete or verify a tag object signed with GPG"
complete -xc git -a worktree -d "Manage multiple working trees"
complete -xc git -a gitk -d "The Git repository browser"
# Git ancillary commands: manipulators
complete -xc git -a config -d "Get and set repository or global options"
complete -xc git -a fast-export -d "Git data exporter"
complete -xc git -a fast-import -d "Backend for fast Git data importers"
complete -xc git -a filter-branch -d "Rewrite branches"
complete -xc git -a mergetool -d "Run merge conflict resolution tools to resolve merge conflicts"
complete -xc git -a pack-refs -d "Pack heads and tags for efficient repository access"
complete -xc git -a prune -d "Prune all unreachable objects from the object database"
complete -xc git -a reflog -d "Manage reflog information"
complete -xc git -a remote -d "Manage set of tracked repositories"
complete -xc git -a repack -d "Pack unpacked objects in a repository"
complete -xc git -a replace -d "Create, list, delete refs to replace objects"
# Git ancillary commands: interrogators
complete -xc git -a annotate -d "Annotate file lines with commit information"
complete -xc git -a blame -d "Show what revision and author last modified each line of a file"
complete -xc git -a cherry -d "Find commits yet to be applied to upstream"
complete -xc git -a count-objects -d "Count unpacked number of objects and their disk consumption"
complete -xc git -a difftool -d "Show changes using common diff tools"
complete -xc git -a fsck -d "Verifies the connectivity and validity of the objects in the database"
complete -xc git -a get-tar-commit-id -d "Extract commit ID from an archive created using git-archive"
complete -xc git -a help -d "Display help information about Git"
complete -xc git -a instaweb -d "Instantly browse your working repository in gitweb"
complete -xc git -a merge-tree -d "Show three-way merge without touching index"
complete -xc git -a rerere -d "Reuse recorded resolution of conflicted merges"
complete -xc git -a rev-parse -d "Pick out and massage parameters"
complete -xc git -a show-branch -d "Show branches and their commits"
complete -xc git -a verify-commit -d "Check the GPG signature of commits"
complete -xc git -a verify-tag -d "Check the GPG signature of tags"
complete -xc git -a whatchanged -d "Show logs with difference each commit introduces"
complete -xc git -a gitweb -d "Git web interface (web frontend to Git repositories)"
# Git foreign SCM interactions
complete -xc git -a archimport -d "Import an Arch repository into Git"
complete -xc git -a cvsexportcommit -d "Export a single commit to a CVS checkout"
complete -xc git -a cvsimport -d "Salvage your data out of another SCM people love to hate"
complete -xc git -a cvsserver -d "A CVS server emulator for Git"
complete -xc git -a imap-send -d "Send a collection of patches from stdin to an IMAP folder"
complete -xc git -a p4 -d "Import from and submit to Perforce repositories"
complete -xc git -a quiltimport -d "Applies a quilt patchset onto the current branch"
complete -xc git -a request-pull -d "Generates a summary of pending changes"
complete -xc git -a send-email -d "Send a collection of patches as emails"
complete -xc git -a svn -d "Bidirectional operation between a Subversion repository and Git"
## Git low-level commands
# manipulation commands
complete -xc git -a apply -d "Apply a patch to files and/or to the index"
complete -xc git -a checkout-index -d "Copy files from the index to the working tree"
complete -xc git -a commit-tree -d "Create a new commit object"
complete -xc git -a hash-object -d "Compute object ID and optionally creates a blob from a file"
complete -xc git -a index-pack -d "Build pack index file for an existing packed archive"
complete -xc git -a merge-file -d "Run a three-way file merge"
complete -xc git -a merge-index -d "Run a merge for files needing merging"
complete -xc git -a mktag -d "Creates a tag object"
complete -xc git -a mktree -d "Build a tree-object from ls-tree formatted text"
complete -xc git -a pack-objects -d "Create a packed archive of objects"
complete -xc git -a prune-packed -d "Remove extra objects that are already in pack files"
complete -xc git -a read-tree -d "Reads tree information into the index"
complete -xc git -a symbolic-ref -d "Read, modify and delete symbolic refs"
complete -xc git -a unpack-objects -d "Unpack objects from a packed archive"
complete -xc git -a update-index -d "Register file contents in the working tree to the index"
complete -xc git -a update-ref -d "Update the object name stored in a ref safely"
complete -xc git -a write-tree -d "Create a tree object from the current index"
# interrogation commands
complete -xc git -a cat-file -d "Provide content or type and size information for repository objects"
complete -xc git -a diff-files -d "Compares files in the working tree and the index"
complete -xc git -a diff-index -d "Compare a tree to the working tree or index"
complete -xc git -a diff-tree -d "Compares the content and mode of blobs found via two tree objects"
complete -xc git -a 'for-each-ref' -d "Output information on each ref"
complete -xc git -a ls-files -d "Show information about files in the index and the working tree"
complete -xc git -a ls-remote -d "List references in a remote repository"
complete -xc git -a ls-tree -d "List the contents of a tree object"
complete -xc git -a merge-base -d "Find as good common ancestors as possible for a merge"
complete -xc git -a name-rev -d "Find symbolic names for given revs"
complete -xc git -a pack-redundant -d "Find redundant pack files"
complete -xc git -a rev-list -d "Lists commit objects in reverse chronological order"
complete -xc git -a show-index -d "Show packed archive index"
complete -xc git -a show-ref -d "List references in a local repository"
complete -xc git -a unpack-file -d "Creates a temporary file with a blob’s contents"
complete -xc git -a var -d "Show a Git logical variable"
complete -xc git -a verify-pack -d "Validate packed Git archive files"
# Synching repositories
complete -xc git -a daemon -d "A really simple server for Git repositories"
complete -xc git -a fetch-pack -d "Receive missing objects from another repository"
complete -xc git -a http-backend -d "Server side implementation of Git over HTTP"
complete -xc git -a send-pack -d "Push objects over Git protocol to another repository"
complete -xc git -a update-server-info -d "Update auxiliary info file to help dumb servers"
complete -xc git -a http-fetch -d "Download from a remote Git repository via HTTP"
complete -xc git -a http-push -d "Push objects over HTTP/DAV to another repository"
complete -xc git -a parse-remote -d "Routines to help parsing remote repository access parameters"
complete -xc git -a receive-pack -d "Receive what is pushed into the repository"
complete -xc git -a shell -d "Restricted login shell for Git-only SSH access"
complete -xc git -a upload-archive -d "Send archive back to git-archive"
complete -xc git -a upload-pack -d "Send objects packed back to git-fetch-pack"
# Internal helper commands
complete -xc git -a check-attr -d "Display gitattributes information"
complete -xc git -a check-ignore -d "Debug gitignore / exclude files"
complete -xc git -a check-mailmap -d "Show canonical names and email addresses of contacts"
complete -xc git -a check-ref-format -d "Ensures that a reference name is well formed"
complete -xc git -a column -d "Display data in columns"
complete -xc git -a credential -d "Retrieve and store user credentials"
complete -xc git -a credential-cache -d "Helper to temporarily store passwords in memory"
complete -xc git -a credential-store -d "Helper to store credentials on disk"
complete -xc git -a fmt-merge-msg -d "Produce a merge commit message"
complete -xc git -a interpret-trailers -d "add or parse structured information in commit messages"
complete -xc git -a mailinfo -d "Extracts patch and authorship from a single e-mail message"
complete -xc git -a mailsplit -d "Simple UNIX mbox splitter program"
complete -xc git -a merge-one-file -d "The standard helper program to use with git-merge-index"
complete -xc git -a patch-id -d "Compute unique ID for a patch"
complete -xc git -a sh-i18n -d "Git’s i18n setup code for shell scripts"
complete -xc git -a sh-setup -d "Common Git shell script setup code"
complete -xc git -a stripspace -d "Remove unnecessary whitespace"

### Custom git aliases
# true aliases (shorter versions of vanilla commands)
complete -xc git -a s -d "status: Show the working tree status"
complete -xc git -a co -d "checkout: Switch branches or restore working tree files"
complete -xc git -a cherrypick -d "cherry-pick: Apply the changes introduced by some existing commits"
complete -xc git -a cherry -d "cherry-pick: Apply the changes introduced by some existing commits"
complete -xc git -a cp -d "cherry-pick: Apply the changes introduced by some existing commits"
# complex aliases
complete -xc git -a unstage -d "unstage changes (reset -q HEAD --)"
complete -xc git -a discard -d "discard changes (checkout --)"
complete -xc git -a uncommit -d "uncommit changes (reset --mixed HEAD~)"
complete -xc git -a ammend -d "ammend commit (commit --amend --all)"
complete -xc git -a hreset -d "hard reset (reset --hard)"
complete -xc git -a fpush -d "force push ❤️ (push --force)"
complete -xc git -a c -d "commit adding files and message (commit -am)"
complete -xc git -a sclone -d "TODO (clone --depth=1)"
complete -xc git -a 'df' -d "TODO (diff --color --color-words --abbrev)"
complete -xc git -a lg -d "TODO (log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --)"
complete -xc git -a 'diff' -d "TODO (diff --word-diff)"
complete -xc git -a reup -d "TODO (rebase-update)"
complete -xc git -a d -d "Show the diff between the latest commit and the current state (diff-index --quiet HEAD -- || clear; diff --no-pager --patch-with-stat)"
complete -xc git -a fixup -d "Fixup staged changes to specified commit"
complete -xc git -a fixit -d "Commit staged changes into specific commit w/o opening editor"
complete -xc git -a scraplastcommit -d "remove changes (reset --hard HEAD^)"
complete -xc git -a unwindlastcommit -d "keep your changes (reset --soft HEAD^)"
complete -xc git -a reverselastcommit -d "generate a changeset to reverse a previous commit (revert HEAD)"
complete -xc git -a nevermind -d "reset --hard HEAD && clean -d -f"
complete -xc git -a graph -d "TODO (log --graph -10 --branches --remotes --tags  --format=format:'%Cgreen%h %Creset• %<(75,trunc)%s (%cN, %cr) %Cred%d' --date-order)"
complete -xc git -a precommit -d "TODO (diff --cached --diff-algorithm=minimal -w)"
complete -xc git -a ls -d "list commits in short form, with colors and branch/tag annotations"
complete -xc git -a ll -d "List commits showing changed files"
complete -xc git -a lnc -d "List commits with no colors for unix piping"
complete -xc git -a lds -d "List oneline commits showing dates"
complete -xc git -a le -d "short log (log --oneline --decorate)"
complete -xc git -a filelog -d "see all the commits related to a file, with the diff of the changes"
complete -xc git -a fl -d "see all the commits related to a file, with the diff of the changes"
complete -xc git -a dl -d "check what was in the last commit"
complete -xc git -a dlc -d "Show a diff last commit"
complete -xc git -a diffunc -d "Diff uncommited changes"
complete -xc git -a dr -d "Show content (full diff) of a commit given a revision"
complete -xc git -a lc -d "Show content (full diff) of a commit given a revision"
complete -xc git -a diffr -d "Show content (full diff) of a commit given a revision"
complete -xc git -a f -d "Find a file path in codebase"
complete -xc git -a 'grep' -d "Search/grep your entire codebase for a string"
complete -xc git -a gr -d "Search/grep your entire codebase for a string"
complete -xc git -a gra -d "Grep from root folder"
complete -xc git -a 'la' -d "List all git aliases an their comments"
complete -xc git -a lasttag -d "show last tag"
complete -xc git -a lt -d "show last tag"
complete -xc git -a short-recent -d "show recent branches"
complete -xc git -a fza -d "fuzzy add using fzf"
complete -xc git -a fco -d "fuzzy switch branch"
complete -xc git -a ffix -d "fuzzy fix staged changes into existing commit"
complete -xc git -a frebase -d "fuzzy rebase interactive choose existing commit to start from"
complete -xc git -a fed -d "fuzzy edit untracked/modified files"
complete -xc git -a fedconflicts -d "fuzzy edit files in conflict state"
complete -xc git -a fgrep -d "fuzzy gitgrep working tree for pattern and choose file(s) to edit"
complete -xc git -a fedlog -d "fuzzy select past commit, and edit current state of file(s) changed in it"
complete -xc git -a freset -d "fuzzy reset back to prior commit"
complete -xc git -a yolo -d "amend and force push without interaction :D"
