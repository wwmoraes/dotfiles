#!/usr/bin/env sh
# chezmoi:template:left-delimiter="#{{" right-delimiter=}}

#{{- $sources := list }}
#{{- $sources = append $sources (joinPath .chezmoi.sourceDir ".setup.d" "packages" "pip.txt") }}
#{{- $sources = append $sources (joinPath .chezmoi.sourceDir ".setup.d" "packages" .chezmoi.os "pip.txt") }}
#{{- $sources = append $sources (joinPath .chezmoi.sourceDir ".setup.d" "packages" .chezmoi.hostname "pip.txt") }}
#{{- if .tags.personal }}
#{{- $sources = append $sources (joinPath .chezmoi.sourceDir ".setup.d" "packages" "personal" "pip.txt") }}
#{{- else if .tags.work }}
#{{- $sources = append $sources (joinPath .chezmoi.sourceDir ".setup.d" "packages" "work" "pip.txt") }}
#{{- end }}

#{{- range $_, $source := $sources }}
#{{- if stat $source }}
# #{{ $source }} hash: #{{ include $source | sha256sum }}
#{{- end }}
#{{- end }}

set -eum
trap 'kill 0' INT HUP TERM

: "${ARCH:?unknown architecture}"
: "${SYSTEM:?unknown system}"
: "${PACKAGES_PATH:?must be set}"

test "${TRACE:-0}" = "1" && set -x
test "${VERBOSE:-0}" = "1" && set -v

# import common functions
# shellcheck source=../.setup.d/functions.sh
. "${DOTFILES_PATH}/.setup.d/functions.sh"

printf "\e[1;33mPython3 packages\e[0m\n"

### Check package tool
printf "Checking \e[96mpipx\e[0m manager...\n"
if ! _=$(command -v pipx >/dev/null 2>&1); then
  echo "pipx not found"
  exit 1
fi

createAndEnterTmpDir

printf "Listing installed packages...\n"
INSTALLED="${PWD}/installed"
pipx list -qq --short | cut -d' ' -f1 > "${INSTALLED}"

getPackagesPipeIntoVariable "pip.txt" PACKAGES
FIFO=$(getRandomFifo)

### Install packages
while read -r PACKAGE; do
  parsePackageForRemoval "${PACKAGE}" > "${FIFO}"
  read -r REMOVE PACKAGE < "${FIFO}"

  case "${REMOVE}" in
    1)
      printStatus uninstall check "${PACKAGE%%|*}"
      grep -q "${PACKAGE%%|*}" "${INSTALLED}" || {
        printStatus uninstall skip "${PACKAGE%%|*}"
        continue
      }

      printStatus uninstall execute "${PACKAGE%%|*}"
      pipx uninstall -qq "${PACKAGE##*|}"
      printStatus uninstall "${status:-success}" "${PACKAGE%%|*}"
    ;;
    0)
      printStatus install check "${PACKAGE%%|*}"
      grep -q "${PACKAGE%%|*}" "${INSTALLED}" && {
        printStatus install skip "${PACKAGE%%|*}"
        continue
      }

      printStatus install execute "${PACKAGE%%|*}"
      pipx install -qq "${PACKAGE##*|}"
      printStatus install "${status:-success}" "${PACKAGE%%|*}"
    ;;
  esac
done < "${PACKAGES}"
