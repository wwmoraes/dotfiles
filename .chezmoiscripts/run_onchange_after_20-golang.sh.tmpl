#!/usr/bin/env sh
# chezmoi:template:left-delimiter="#{{" right-delimiter=}}

#{{- $sources := list }}
#{{- $sources = append $sources (joinPath .chezmoi.sourceDir ".setup.d" "packages" "golang.txt") }}
#{{- $sources = append $sources (joinPath .chezmoi.sourceDir ".setup.d" "packages" .chezmoi.os "golang.txt") }}
#{{- $sources = append $sources (joinPath .chezmoi.sourceDir ".setup.d" "packages" .chezmoi.hostname "golang.txt") }}
#{{- if .tags.personal }}
#{{- $sources = append $sources (joinPath .chezmoi.sourceDir ".setup.d" "packages" "personal" "golang.txt") }}
#{{- else if .tags.work }}
#{{- $sources = append $sources (joinPath .chezmoi.sourceDir ".setup.d" "packages" "work" "golang.txt") }}
#{{- end }}

#{{- range $_, $source := $sources }}
#{{- if stat $source }}
# #{{ $source }} hash: #{{ include $source | sha256sum }}
#{{- end }}
#{{- end }}

set -eum
trap 'kill 0' INT HUP TERM

: "${ARCH:?unknown architecture}"
: "${SYSTEM:?unknown system}"
: "${DOTFILES_PATH:?must be set}"
: "${PACKAGES_PATH:?must be set}"
: "${GOPATH:=${HOME}/go}"

test "${TRACE:-0}" = "1" && set -x
test "${VERBOSE:-0}" = "1" && set -v

# import common functions
# shellcheck source=../.setup.d/functions.sh
. "${DOTFILES_PATH}/.setup.d/functions.sh"

h1 "Golang packages"

### Check package tool
printCheckingBinary "go"
# Get manager
if ! _=$(command -V go >/dev/null 2>&1); then
  GOINSTALL=
  case "${SYSTEM}" in
    "darwin")
      GOINSTALL=--darwin
      ;;
    "linux")
      if [ "${ARCH}" = "amd64" ]; then
        GOINSTALL=--64
      else
        GOINSTALL=--32
      fi
      ;;
  esac
  curl -fsSL https://raw.githubusercontent.com/wwmoraes/golang-tools-install-script/master/goinstall.sh | bash -s - "${GOINSTALL}"
fi

printf "Checking packages in %s...\n" "$(colorPath "${GOPATH}")"

createAndEnterTmpDir

getPackagesPipeIntoVariable "golang.txt" PACKAGES
FIFO=$(getRandomFifo)

### Install packages
while read -r PACKAGE; do
  parsePackageForRemoval "${PACKAGE}" > "${FIFO}"
  read -r REMOVE PACKAGE < "${FIFO}"

  PKG="${PACKAGE%%:*}"
  BIN="${PACKAGE##*:}"
  test "${BIN}" = "${PKG}" && unset BIN

  MODULE="${PKG%%@*}"
  VERSION="${PACKAGE##*@}"
  test "${VERSION}" = "${MODULE}" && unset VERSION

  : "${BIN:=$(basename "${MODULE}")}"
  : "${VERSION:=latest}"

  GOPATH=$(go env GOPATH)

  case "${REMOVE}" in
    1)
      printStatus uninstall check "${MODULE}"
      test -f "${GOPATH:?}/bin/${BIN}" || {
        printStatus uninstall skip "${MODULE}"
        continue
      }

      printStatus uninstall execute "${MODULE}"
      if [ -d "${GOPATH:?}/src/${MODULE}" ]; then
        rm -rf "${GOPATH:?}/src/${MODULE}" || status=failure
      fi
      if [ -f "${GOPATH:?}/bin/${BIN}" ]; then
        rm -rf "${GOPATH:?}/bin/${BIN}" || status=failure
      fi
      if [ -d "${GOPATH:?}/pkg/mod/${MODULE}" ]; then
        rm -rf "${GOPATH:?}/pkg/mod/${MODULE}" || status=failure
      fi
      if [ -d "${GOPATH:?}/pkg/mod/cache/download/${MODULE}" ]; then
        rm -rf "${GOPATH:?}/pkg/mod/cache/download/${MODULE}" || status=failure
      fi
      printStatus install "${status:-success}" "${MODULE}"
    ;;
    0)
      printStatus install check "${MODULE}"
      test -f "${GOPATH:?}/bin/${BIN}" && {
        printStatus install skip "${MODULE}"
        continue
      }

      printStatus install execute "${MODULE}"
      env -u GOBIN go install "${MODULE}@${VERSION}" || status=failure
      printStatus install "${status:-success}" "${MODULE}"
    ;;
  esac
done < "${PACKAGES}"

# Darwin go binaries are still built only for x64. This means install builds for
# arm64, but the end binary is sent to a subdirectory. We fix that by moving
# them all to avoid yet another directory on the PATH
GO_BIN_PATH="$(go env GOPATH)/bin"
GO_OS_ARCH_BIN_PATH="${GO_BIN_PATH}/$(go env GOOS)_$(go env GOARCH)"
if [ -d "${GO_OS_ARCH_BIN_PATH}" ]; then
  find "${GO_OS_ARCH_BIN_PATH}" -type f -exec mv {} "${GO_BIN_PATH}" \;
  rmdir "${GO_OS_ARCH_BIN_PATH}"
fi
