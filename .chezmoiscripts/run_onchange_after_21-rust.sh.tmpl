#!/usr/bin/env sh
# chezmoi:template:left-delimiter="#{{" right-delimiter=}}

#{{- $sources := list }}
#{{- $sources = append $sources (joinPath .chezmoi.sourceDir ".setup.d" "packages" "rust.txt") }}
#{{- $sources = append $sources (joinPath .chezmoi.sourceDir ".setup.d" "packages" .chezmoi.os "rust.txt") }}
#{{- $sources = append $sources (joinPath .chezmoi.sourceDir ".setup.d" "packages" .chezmoi.hostname "rust.txt") }}
#{{- if .tags.personal }}
#{{- $sources = append $sources (joinPath .chezmoi.sourceDir ".setup.d" "packages" "personal" "rust.txt") }}
#{{- else if .tags.work }}
#{{- $sources = append $sources (joinPath .chezmoi.sourceDir ".setup.d" "packages" "work" "rust.txt") }}
#{{- end }}

#{{- range $_, $source := $sources }}
#{{- if stat $source }}
# #{{ $source }} hash: #{{ include $source | sha256sum }}
#{{- end }}
#{{- end }}

set -eum
trap 'kill 0' INT HUP TERM

: "${ARCH:?unknown architecture}"
: "${SYSTEM:?unknown system}"
: "${PACKAGES_PATH:?must be set}"

test "${TRACE:-0}" = "1" && set -x
test "${VERBOSE:-0}" = "1" && set -v

# import common functions
# shellcheck source=../.setup.d/functions.sh
. "${DOTFILES_PATH}/.setup.d/functions.sh"

printf "\e[1;33mRust packages\e[0m\n"

### Check package tool
printf "Checking \e[91mrustup\e[0m...\n"
# Get manager
if ! _=$(command -V rustup >/dev/null 2>&1); then
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
fi

enterTmp
printf "Listing installed packages...\n"
INSTALLED="${TMP}/installed"
cargo install --list | grep ':' | cut -d' ' -f1 > "${INSTALLED}"

getPackages "rust.txt"
: "${PACKAGES:?run getPackages to generate}"

### Install packages
while read -r PACKAGE; do
  case "${PACKAGE%%:*}" in
    -*) REMOVE=1; PACKAGE=${PACKAGE#-*};;
    *) REMOVE=0;;
  esac

  case "${REMOVE}" in
    1)
      printf "[\e[91muninstall\e[m] Checking \e[96m%s\e[0m\n" "${PACKAGE%%:*}"
      grep -q "${PACKAGE%%:*}" "${INSTALLED}" || continue
      printf "[\e[91muninstall\e[m] Uninstalling \e[95m%s\e[0m\n" "${PACKAGE%%:*}"
      cargo -q uninstall -p "${PACKAGE%%:*}"
    ;;
    0)
      printf "[\e[92m install \e[m] Checking \e[96m%s\e[0m\n" "${PACKAGE%%:*}"
      grep -q "${PACKAGE%%:*}" "${INSTALLED}" && continue
      printf "[\e[92m install \e[m] Installing \e[96m%s\e[0m\n" "${PACKAGE%%:*}"
      cargo -q install "${PACKAGE%%:*}"
    ;;
  esac
done < "${PACKAGES}"
